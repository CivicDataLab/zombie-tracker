{"version":3,"sources":["components/Cell.js","components/Row.js","components/DistrictRow.js"],"names":["React","memo","statistic","data","isPerMillion","total","getStatistic","delta","spring","useSpring","config","SPRING_CONFIG_NUMBERS","statisticConfig","STATISTIC_CONFIGS","className","hideDelta","div","classnames","interpolate","formatNumber","format","Math","abs","prevProps","currProps","equal","showdist","stateCode","districtName","regionHighlighted","setRegionHighlighted","expandTable","useState","showDistricts","setShowDistricts","useSessionStorage","sortColumn","isAscending","sortData","setSortData","history","useHistory","t","useTranslation","rowElement","useRef","handleSortClick","useCallback","produce","draftSortData","sortingFunction","districtNameA","districtNameB","statisticA","districts","statisticB","localeCompare","_setShowDistrict","draftRegionHighlighted","districtNameStr","UNKNOWN_DISTRICT_KEY","STATE_NAMES","handleStatePageClick","push","handleCollapse","current","scrollIntoView","block","tableStatistics","TABLE_STATISTICS_EXPANDED","TABLE_STATISTICS","Fragment","onClick","ref","meta","notes","size","map","key","capitalize","formatLastUpdated","last_updated","bind","this","state","invert","handleSort","Object","keys","sort","a","b"],"mappings":"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","file":"static/js/3.da865406.chunk.js","sourcesContent":["import {SPRING_CONFIG_NUMBERS, STATISTIC_CONFIGS} from '../constants.js';\nimport {formatNumber, getStatistic} from '../utils/commonFunctions';\n\nimport classnames from 'classnames';\nimport equal from 'fast-deep-equal';\nimport React from 'react';\nimport {animated, useSpring} from 'react-spring';\n\nconst Cell = ({statistic, data, isPerMillion}) => {\n  const total = getStatistic(data, 'total', statistic, isPerMillion);\n  const delta = getStatistic(data, 'delta', statistic, isPerMillion);\n\n  const spring = useSpring({\n    total: total,\n    delta: delta,\n    config: SPRING_CONFIG_NUMBERS,\n  });\n\n  const statisticConfig = STATISTIC_CONFIGS[statistic];\n\n  return (\n    <div className=\"cell statistic\">\n      {!statisticConfig.hideDelta && (\n        <animated.div className={classnames('delta', `is-${statistic}`)}>\n          {spring.delta.interpolate((delta) =>\n            delta > 0\n              ? '\\u2191' + formatNumber(delta, statisticConfig.format)\n              : delta < 0\n              ? '\\u2193' + formatNumber(Math.abs(delta), statisticConfig.format)\n              : ''\n          )}\n        </animated.div>\n      )}\n\n      <animated.div className=\"total\">\n        {spring.total.interpolate((total) =>\n          formatNumber(total, statisticConfig.format, statistic)\n        )}\n      </animated.div>\n    </div>\n  );\n};\n\nconst isCellEqual = (prevProps, currProps) => {\n  if (!equal(prevProps.data?.total, currProps.data?.total)) {\n    return false;\n  }\n  if (!equal(prevProps.data?.delta, currProps.data?.delta)) {\n    return false;\n  }\n  if (!equal(prevProps.isPerMillion, currProps.isPerMillion)) {\n    return false;\n  }\n  return true;\n};\n\nexport default React.memo(Cell, isCellEqual);\n","import Cell from './Cell';\nimport DistrictRow from './DistrictRow';\nimport HeaderCell from './HeaderCell';\nimport Tooltip from './Tooltip';\n\nimport {\n  STATE_NAMES,\n  TABLE_STATISTICS,\n  TABLE_STATISTICS_EXPANDED,\n  UNKNOWN_DISTRICT_KEY,\n} from '../constants';\nimport {\n  capitalize,\n  formatLastUpdated,\n  getStatistic,\n} from '../utils/commonFunctions';\n\nimport {\n  AlertIcon,\n  ClockIcon,\n  FilterIcon,\n  FoldUpIcon,\n  GraphIcon,\n  InfoIcon,\n} from '@primer/octicons-v2-react';\nimport classnames from 'classnames';\nimport equal from 'fast-deep-equal';\nimport produce from 'immer';\nimport React, {useState, useCallback, useRef} from 'react';\nimport {useTranslation} from 'react-i18next';\nimport {useHistory} from 'react-router-dom';\nimport {useSessionStorage} from 'react-use';\n\nfunction Row({\n  data,\n  showdist=false,\n  stateCode,\n  districtName,\n  isPerMillion,\n  regionHighlighted,\n  setRegionHighlighted,\n  expandTable,\n}) {\n  const [showDistricts, setShowDistricts] = useState(showdist);\n  const [sortData, setSortData] = useSessionStorage('districtSortData', {\n    sortColumn: 'confirmed',\n    isAscending: false,\n    delta: false,\n  });\n\n  const history = useHistory();\n  const {t} = useTranslation();\n\n  const rowElement = useRef();\n\n  const handleSortClick = useCallback(\n    (statistic) => {\n      setSortData(\n        produce(sortData, (draftSortData) => {\n          draftSortData.isAscending = !sortData.isAscending;\n          draftSortData.sortColumn = statistic;\n        })\n      );\n    },\n    [sortData, setSortData]\n  );\n\n  const sortingFunction = useCallback(\n    (districtNameA, districtNameB) => {\n      if (sortData.sortColumn !== 'districtName') {\n        const statisticA = getStatistic(\n          data.districts[districtNameA],\n          sortData.delta ? 'delta' : 'total',\n          sortData.sortColumn,\n          isPerMillion\n        );\n        const statisticB = getStatistic(\n          data.districts[districtNameB],\n          sortData.delta ? 'delta' : 'total',\n          sortData.sortColumn,\n          isPerMillion\n        );\n        return sortData.isAscending\n          ? statisticA - statisticB\n          : statisticB - statisticA;\n      } else {\n        return sortData.isAscending\n          ? districtNameA.localeCompare(districtNameB)\n          : districtNameB.localeCompare(districtNameA);\n      }\n    },\n    [sortData, data, isPerMillion]\n  );\n\n  const highlightState = useCallback(() => {\n    if (stateCode) {\n      if (regionHighlighted.stateCode !== stateCode) {\n        setRegionHighlighted(\n          produce(regionHighlighted, (draftRegionHighlighted) => {\n            draftRegionHighlighted.stateCode = stateCode;\n            draftRegionHighlighted.districtName = null;\n          })\n        );\n      }\n    } else if (districtName) {\n      if (\n        regionHighlighted.districtName !== districtName ||\n        regionHighlighted.stateCode !== data.stateCode\n      ) {\n        setRegionHighlighted(\n          produce(regionHighlighted, (draftRegionHighlighted) => {\n            draftRegionHighlighted.stateCode = data.stateCode;\n            draftRegionHighlighted.districtName = districtName;\n          })\n        );\n      }\n    }\n  }, [\n    data.stateCode,\n    districtName,\n    regionHighlighted,\n    setRegionHighlighted,\n    stateCode,\n  ]);\n\n  const _setShowDistrict = useCallback(() => {\n    if (data.districts) {\n      setShowDistricts(!showDistricts);\n    }\n  }, [showDistricts, data]);\n\n  let districtNameStr = districtName;\n  if (districtName === UNKNOWN_DISTRICT_KEY) {\n    districtNameStr = `${t(UNKNOWN_DISTRICT_KEY)} [${t(\n      STATE_NAMES[data.stateCode]\n    )}]`;\n  }\n\n  const handleStatePageClick = useCallback(\n    (stateCode) => {\n      history.push(`/viz/state/${stateCode}`);\n    },\n    [history]\n  );\n\n  const handleCollapse = useCallback(() => {\n    setShowDistricts(false);\n    rowElement.current.scrollIntoView({\n      block: 'start',\n    });\n\n    // eslint-disable-next-line\n    const faux = stateCode;\n  }, [stateCode]);\n\n  const tableStatistics = expandTable\n    ? TABLE_STATISTICS_EXPANDED\n    : TABLE_STATISTICS;\n\n  return (\n    <React.Fragment>\n      <div\n        className={classnames(\n          'row',\n          {'is-total': stateCode === 'TT'},\n          {\n            'is-highlighted':\n              (stateCode && regionHighlighted?.stateCode === stateCode) ||\n              (districtName &&\n                regionHighlighted?.districtName === districtName &&\n                regionHighlighted?.stateCode === data.stateCode),\n          }\n        )}\n        // onMouseEnter={highlightState}\n        onClick={_setShowDistrict}\n        ref={rowElement}\n      >\n        <div className=\"cell\">\n          <div className=\"state-name fadeInUp\">\n            {t(STATE_NAMES[stateCode]) || districtNameStr}\n          </div>\n          {data?.meta?.notes && (\n            <Tooltip {...{data: data.meta.notes}}>\n              <InfoIcon size={16} />\n            </Tooltip>\n          )}\n        </div>\n\n        {tableStatistics.map((statistic) => (\n          <Cell key={statistic} {...{data, statistic, isPerMillion}} />\n        ))}\n      </div>\n\n      {showDistricts && (\n        <React.Fragment>\n          <div className=\"state-meta\">\n            <div className=\"state-meta-top\">\n              {data?.meta?.['last_updated'] && (\n                <p className=\"last-updated\">\n                  <ClockIcon />\n                  {capitalize(\n                    `${formatLastUpdated(data.meta.last_updated)} ${t('ago')}`\n                  )}\n                </p>\n              )}\n              <div\n                className=\"state-page\"\n                onClick={handleStatePageClick.bind(this, stateCode)}\n              >\n                <GraphIcon />\n                <span>\n                  {t('See more details on {{state}}', {\n                    state: stateCode,\n                  })}\n                </span>\n              </div>\n            </div>\n\n            {UNKNOWN_DISTRICT_KEY in data.districts && (\n              <div className=\"state-meta-bottom\">\n                <div className={classnames('disclaimer')}>\n                  <AlertIcon />\n                  <span>\n                    {t('District-wise data not available in state bulletin')}\n                  </span>\n                </div>\n              </div>\n            )}\n          </div>\n\n          <div className={classnames('row', 'heading')}>\n            <div\n              className=\"cell heading\"\n              onClick={handleSortClick.bind(this, 'districtName')}\n            >\n              <div className=\"district-name\">{t('District')}</div>\n              {sortData.sortColumn === 'districtName' && (\n                <div\n                  className={classnames('sort-icon', {\n                    invert: !sortData.isAscending,\n                  })}\n                >\n                  <FilterIcon size={10} />\n                </div>\n              )}\n            </div>\n\n            {tableStatistics.map((statistic) => (\n              <HeaderCell\n                key={statistic}\n                {...{statistic, sortData, setSortData}}\n                handleSort={handleSortClick.bind(this, statistic)}\n              />\n            ))}\n          </div>\n        </React.Fragment>\n      )}\n\n      {showDistricts &&\n        Object.keys(data.districts)\n          .sort((a, b) => sortingFunction(a, b))\n          .map((districtName) => (\n            <DistrictRow\n              data={data.districts[districtName]}\n              key={districtName}\n              {...{\n                districtName,\n                regionHighlighted,\n                setRegionHighlighted,\n                stateCode,\n                isPerMillion,\n                expandTable,\n              }}\n            />\n          ))}\n\n      {showDistricts && (\n        <div className=\"spacer-row\">\n          <div className=\"spacer\">\n            <p>{`End of ${t(STATE_NAMES[stateCode])}'s districts`}</p>\n            <div className=\"fold\" onClick={handleCollapse}>\n              <FoldUpIcon />\n            </div>\n          </div>\n        </div>\n      )}\n    </React.Fragment>\n  );\n}\n\nconst isEqual = (prevProps, currProps) => {\n  if (!equal(prevProps.data?.total, currProps.data?.total)) {\n    return false;\n  } else if (!equal(prevProps.data?.delta, currProps.data?.delta)) {\n    return false;\n  } else if (!equal(prevProps.isPerMillion, currProps.isPerMillion)) {\n    return false;\n  } else if (\n    (!equal(\n      prevProps.regionHighlighted.stateCode,\n      currProps.regionHighlighted.stateCode\n    ) &&\n      equal(prevProps.regionHighlighted.stateCode, prevProps.stateCode)) ||\n    equal(currProps.regionHighlighted.stateCode, currProps.stateCode)\n  ) {\n    return false;\n  } else if (\n    (!equal(\n      prevProps.regionHighlighted.districtName,\n      currProps.regionHighlighted.districtName\n    ) &&\n      equal(\n        prevProps.regionHighlighted.districtName,\n        prevProps.districtName\n      )) ||\n    equal(currProps.regionHighlighted.districtName, currProps.districtName)\n  ) {\n    return false;\n  } else if (!equal(prevProps.expandTable, currProps.expandTable)) {\n    return false;\n  } else return true;\n};\n\nexport default React.memo(Row, isEqual);\n","import Cell from './Cell';\nimport Tooltip from './Tooltip';\n\nimport {TABLE_STATISTICS, TABLE_STATISTICS_EXPANDED} from '../constants';\n\nimport {InfoIcon} from '@primer/octicons-v2-react';\nimport classnames from 'classnames';\nimport equal from 'fast-deep-equal';\nimport produce from 'immer';\nimport React, {useCallback} from 'react';\nimport {useTranslation} from 'react-i18next';\n\nfunction DistrictRow({\n  stateCode,\n  districtName,\n  data,\n  isPerMillion,\n  regionHighlighted,\n  setRegionHighlighted,\n  expandTable,\n}) {\n  const {t} = useTranslation();\n\n  const highlightDistrict = useCallback(() => {\n    if (regionHighlighted.districtName !== districtName) {\n      setRegionHighlighted(\n        produce(regionHighlighted, (draftRegionHighlighted) => {\n          draftRegionHighlighted.stateCode = stateCode;\n          draftRegionHighlighted.districtName = districtName;\n        })\n      );\n    }\n  }, [regionHighlighted, districtName, setRegionHighlighted, stateCode]);\n\n  const tableStatistics = expandTable\n    ? TABLE_STATISTICS_EXPANDED\n    : TABLE_STATISTICS;\n\n  return (\n    <div\n      className={classnames('row', 'district', {\n        'is-highlighted': regionHighlighted?.districtName === districtName,\n      })}\n      // onMouseEnter={highlightDistrict}\n    >\n      <div className=\"cell\">\n        <div className=\"state-name\">{t(districtName)}</div>\n        {data?.meta?.notes && (\n          <Tooltip {...{data: data.meta.notes}}>\n            <InfoIcon size={16} />\n          </Tooltip>\n        )}\n      </div>\n\n      {tableStatistics.map((statistic) => (\n        <Cell key={statistic} {...{statistic, data, isPerMillion}} />\n      ))}\n    </div>\n  );\n}\n\nconst isDistrictRowEqual = (prevProps, currProps) => {\n  if (!equal(prevProps.data?.total, currProps.data?.total)) {\n    return false;\n  } else if (!equal(prevProps.data?.delta, currProps.data?.delta)) {\n    return false;\n  } else if (\n    !equal(prevProps.data?.['last_updated'], currProps.data?.['last_updated'])\n  ) {\n    return false;\n  } else if (!equal(prevProps.isPerMillion, currProps.isPerMillion)) {\n    return false;\n  } else if (\n    !equal(\n      prevProps.regionHighlighted.districtName,\n      currProps.regionHighlighted.districtName\n    ) &&\n    (equal(prevProps.regionHighlighted.districtName, prevProps.districtName) ||\n      equal(currProps.regionHighlighted.districtName, currProps.districtName))\n  ) {\n    return false;\n  } else if (!equal(prevProps.expandTable, currProps.expandTable)) {\n    return false;\n  }\n  return true;\n};\n\nexport default React.memo(DistrictRow, isDistrictRowEqual);\n"],"sourceRoot":""}