{"version":3,"sources":["components/Cell.js","components/DistrictRow.js","components/Row.js"],"names":["React","memo","statistic","data","isPerMillion","total","getStatistic","delta","spring","useSpring","config","SPRING_CONFIG_NUMBERS","statisticConfig","STATISTIC_CONFIGS","className","hideDelta","div","classnames","interpolate","formatNumber","format","Math","abs","prevProps","currProps","equal","stateCode","districtName","regionHighlighted","setRegionHighlighted","expandTable","t","useTranslation","highlightDistrict","useCallback","produce","draftRegionHighlighted","tableStatistics","TABLE_STATISTICS_EXPANDED","TABLE_STATISTICS","onMouseEnter","meta","notes","Tooltip","size","map","key","useState","showDistricts","setShowDistricts","useSessionStorage","sortColumn","isAscending","sortData","setSortData","history","useHistory","rowElement","useRef","handleSortClick","draftSortData","sortingFunction","districtNameA","districtNameB","statisticA","districts","statisticB","localeCompare","highlightState","_setShowDistrict","districtNameStr","UNKNOWN_DISTRICT_KEY","STATE_NAMES","handleStatePageClick","push","handleCollapse","current","scrollIntoView","block","Fragment","onClick","ref","capitalize","formatLastUpdated","last_updated","bind","this","state","invert","HeaderCell","handleSort","Object","keys","sort","a","b"],"mappings":"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","file":"static/js/6.57925fe4.chunk.js","sourcesContent":["import {SPRING_CONFIG_NUMBERS, STATISTIC_CONFIGS} from '../constants.js';\nimport {formatNumber, getStatistic} from '../utils/commonFunctions';\n\nimport classnames from 'classnames';\nimport equal from 'fast-deep-equal';\nimport React from 'react';\nimport {animated, useSpring} from 'react-spring';\n\nconst Cell = ({statistic, data, isPerMillion}) => {\n  const total = getStatistic(data, 'total', statistic, isPerMillion);\n  const delta = getStatistic(data, 'delta', statistic, isPerMillion);\n\n  const spring = useSpring({\n    total: total,\n    delta: delta,\n    config: SPRING_CONFIG_NUMBERS,\n  });\n\n  const statisticConfig = STATISTIC_CONFIGS[statistic];\n\n  return (\n    <div className=\"cell statistic\">\n      {!statisticConfig.hideDelta && (\n        <animated.div className={classnames('delta', `is-${statistic}`)}>\n          {spring.delta.interpolate((delta) =>\n            delta > 0\n              ? '\\u2191' + formatNumber(delta, statisticConfig.format)\n              : delta < 0\n              ? '\\u2193' + formatNumber(Math.abs(delta), statisticConfig.format)\n              : ''\n          )}\n        </animated.div>\n      )}\n\n      <animated.div className=\"total\">\n        {spring.total.interpolate((total) =>\n          formatNumber(total, statisticConfig.format, statistic)\n        )}\n      </animated.div>\n    </div>\n  );\n};\n\nconst isCellEqual = (prevProps, currProps) => {\n  if (!equal(prevProps.data?.total, currProps.data?.total)) {\n    return false;\n  }\n  if (!equal(prevProps.data?.delta, currProps.data?.delta)) {\n    return false;\n  }\n  if (!equal(prevProps.isPerMillion, currProps.isPerMillion)) {\n    return false;\n  }\n  return true;\n};\n\nexport default React.memo(Cell, isCellEqual);\n","import Cell from './Cell';\nimport Tooltip from './Tooltip';\n\nimport {TABLE_STATISTICS, TABLE_STATISTICS_EXPANDED} from '../constants';\n\nimport {InfoIcon} from '@primer/octicons-v2-react';\nimport classnames from 'classnames';\nimport equal from 'fast-deep-equal';\nimport produce from 'immer';\nimport React, {useCallback} from 'react';\nimport {useTranslation} from 'react-i18next';\n\nfunction DistrictRow({\n  stateCode,\n  districtName,\n  data,\n  isPerMillion,\n  regionHighlighted,\n  setRegionHighlighted,\n  expandTable,\n}) {\n  const {t} = useTranslation();\n\n  const highlightDistrict = useCallback(() => {\n    if (regionHighlighted.districtName !== districtName) {\n      setRegionHighlighted(\n        produce(regionHighlighted, (draftRegionHighlighted) => {\n          draftRegionHighlighted.stateCode = stateCode;\n          draftRegionHighlighted.districtName = districtName;\n        })\n      );\n    }\n  }, [regionHighlighted, districtName, setRegionHighlighted, stateCode]);\n\n  const tableStatistics = expandTable\n    ? TABLE_STATISTICS_EXPANDED\n    : TABLE_STATISTICS;\n\n  return (\n    <div\n      className={classnames('row', 'district', {\n        'is-highlighted': regionHighlighted?.districtName === districtName,\n      })}\n      onMouseEnter={highlightDistrict}\n    >\n      <div className=\"cell\">\n        <div className=\"state-name\">{t(districtName)}</div>\n        {data?.meta?.notes && (\n          <Tooltip {...{data: data.meta.notes}}>\n            <InfoIcon size={16} />\n          </Tooltip>\n        )}\n      </div>\n\n      {tableStatistics.map((statistic) => (\n        <Cell key={statistic} {...{statistic, data, isPerMillion}} />\n      ))}\n    </div>\n  );\n}\n\nconst isDistrictRowEqual = (prevProps, currProps) => {\n  if (!equal(prevProps.data?.total, currProps.data?.total)) {\n    return false;\n  } else if (!equal(prevProps.data?.delta, currProps.data?.delta)) {\n    return false;\n  } else if (\n    !equal(prevProps.data?.['last_updated'], currProps.data?.['last_updated'])\n  ) {\n    return false;\n  } else if (!equal(prevProps.isPerMillion, currProps.isPerMillion)) {\n    return false;\n  } else if (\n    !equal(\n      prevProps.regionHighlighted.districtName,\n      currProps.regionHighlighted.districtName\n    ) &&\n    (equal(prevProps.regionHighlighted.districtName, prevProps.districtName) ||\n      equal(currProps.regionHighlighted.districtName, currProps.districtName))\n  ) {\n    return false;\n  } else if (!equal(prevProps.expandTable, currProps.expandTable)) {\n    return false;\n  }\n  return true;\n};\n\nexport default React.memo(DistrictRow, isDistrictRowEqual);\n","import Cell from './Cell';\nimport DistrictRow from './DistrictRow';\nimport HeaderCell from './HeaderCell';\nimport Tooltip from './Tooltip';\n\nimport {\n  STATE_NAMES,\n  TABLE_STATISTICS,\n  TABLE_STATISTICS_EXPANDED,\n  UNKNOWN_DISTRICT_KEY,\n} from '../constants';\nimport {\n  capitalize,\n  formatLastUpdated,\n  getStatistic,\n} from '../utils/commonFunctions';\n\nimport {\n  AlertIcon,\n  ClockIcon,\n  FilterIcon,\n  FoldUpIcon,\n  GraphIcon,\n  InfoIcon,\n} from '@primer/octicons-v2-react';\nimport classnames from 'classnames';\nimport equal from 'fast-deep-equal';\nimport produce from 'immer';\nimport React, {useState, useCallback, useRef} from 'react';\nimport {useTranslation} from 'react-i18next';\nimport {useHistory} from 'react-router-dom';\nimport {useSessionStorage} from 'react-use';\n\nfunction Row({\n  data,\n  stateCode,\n  districtName,\n  isPerMillion,\n  regionHighlighted,\n  setRegionHighlighted,\n  expandTable,\n}) {\n  const [showDistricts, setShowDistricts] = useState(false);\n  const [sortData, setSortData] = useSessionStorage('districtSortData', {\n    sortColumn: 'confirmed',\n    isAscending: false,\n    delta: false,\n  });\n\n  const history = useHistory();\n  const {t} = useTranslation();\n\n  const rowElement = useRef();\n\n  const handleSortClick = useCallback(\n    (statistic) => {\n      setSortData(\n        produce(sortData, (draftSortData) => {\n          draftSortData.isAscending = !sortData.isAscending;\n          draftSortData.sortColumn = statistic;\n        })\n      );\n    },\n    [sortData, setSortData]\n  );\n\n  const sortingFunction = useCallback(\n    (districtNameA, districtNameB) => {\n      if (sortData.sortColumn !== 'districtName') {\n        const statisticA = getStatistic(\n          data.districts[districtNameA],\n          sortData.delta ? 'delta' : 'total',\n          sortData.sortColumn,\n          isPerMillion\n        );\n        const statisticB = getStatistic(\n          data.districts[districtNameB],\n          sortData.delta ? 'delta' : 'total',\n          sortData.sortColumn,\n          isPerMillion\n        );\n        return sortData.isAscending\n          ? statisticA - statisticB\n          : statisticB - statisticA;\n      } else {\n        return sortData.isAscending\n          ? districtNameA.localeCompare(districtNameB)\n          : districtNameB.localeCompare(districtNameA);\n      }\n    },\n    [sortData, data, isPerMillion]\n  );\n\n  const highlightState = useCallback(() => {\n    if (stateCode) {\n      if (regionHighlighted.stateCode !== stateCode) {\n        setRegionHighlighted(\n          produce(regionHighlighted, (draftRegionHighlighted) => {\n            draftRegionHighlighted.stateCode = stateCode;\n            draftRegionHighlighted.districtName = null;\n          })\n        );\n      }\n    } else if (districtName) {\n      if (\n        regionHighlighted.districtName !== districtName ||\n        regionHighlighted.stateCode !== data.stateCode\n      ) {\n        setRegionHighlighted(\n          produce(regionHighlighted, (draftRegionHighlighted) => {\n            draftRegionHighlighted.stateCode = data.stateCode;\n            draftRegionHighlighted.districtName = districtName;\n          })\n        );\n      }\n    }\n  }, [\n    data.stateCode,\n    districtName,\n    regionHighlighted,\n    setRegionHighlighted,\n    stateCode,\n  ]);\n\n  const _setShowDistrict = useCallback(() => {\n    if (data.districts) {\n      setShowDistricts(!showDistricts);\n    }\n  }, [showDistricts, data]);\n\n  let districtNameStr = districtName;\n  if (districtName === UNKNOWN_DISTRICT_KEY) {\n    districtNameStr = `${t(UNKNOWN_DISTRICT_KEY)} [${t(\n      STATE_NAMES[data.stateCode]\n    )}]`;\n  }\n\n  const handleStatePageClick = useCallback(\n    (stateCode) => {\n      history.push(`state/${stateCode}`);\n    },\n    [history]\n  );\n\n  const handleCollapse = useCallback(() => {\n    setShowDistricts(false);\n    rowElement.current.scrollIntoView({\n      block: 'start',\n    });\n\n    // eslint-disable-next-line\n    const faux = stateCode;\n  }, [stateCode]);\n\n  const tableStatistics = expandTable\n    ? TABLE_STATISTICS_EXPANDED\n    : TABLE_STATISTICS;\n\n  return (\n    <React.Fragment>\n      <div\n        className={classnames(\n          'row',\n          {'is-total': stateCode === 'TT'},\n          {\n            'is-highlighted':\n              (stateCode && regionHighlighted?.stateCode === stateCode) ||\n              (districtName &&\n                regionHighlighted?.districtName === districtName &&\n                regionHighlighted?.stateCode === data.stateCode),\n          }\n        )}\n        onMouseEnter={highlightState}\n        onClick={_setShowDistrict}\n        ref={rowElement}\n      >\n        <div className=\"cell\">\n          <div className=\"state-name fadeInUp\">\n            {t(STATE_NAMES[stateCode]) || districtNameStr}\n          </div>\n          {data?.meta?.notes && (\n            <Tooltip {...{data: data.meta.notes}}>\n              <InfoIcon size={16} />\n            </Tooltip>\n          )}\n        </div>\n\n        {tableStatistics.map((statistic) => (\n          <Cell key={statistic} {...{data, statistic, isPerMillion}} />\n        ))}\n      </div>\n\n      {showDistricts && (\n        <React.Fragment>\n          <div className=\"state-meta\">\n            <div className=\"state-meta-top\">\n              {data?.meta?.['last_updated'] && (\n                <p className=\"last-updated\">\n                  <ClockIcon />\n                  {capitalize(\n                    `${formatLastUpdated(data.meta.last_updated)} ${t('ago')}`\n                  )}\n                </p>\n              )}\n              <div\n                className=\"state-page\"\n                onClick={handleStatePageClick.bind(this, stateCode)}\n              >\n                <GraphIcon />\n                <span>\n                  {t('See more details on {{state}}', {\n                    state: stateCode,\n                  })}\n                </span>\n              </div>\n            </div>\n\n            {UNKNOWN_DISTRICT_KEY in data.districts && (\n              <div className=\"state-meta-bottom\">\n                <div className={classnames('disclaimer')}>\n                  <AlertIcon />\n                  <span>\n                    {t('District-wise data not available in state bulletin')}\n                  </span>\n                </div>\n              </div>\n            )}\n          </div>\n\n          <div className={classnames('row', 'heading')}>\n            <div\n              className=\"cell heading\"\n              onClick={handleSortClick.bind(this, 'districtName')}\n            >\n              <div className=\"district-name\">{t('District')}</div>\n              {sortData.sortColumn === 'districtName' && (\n                <div\n                  className={classnames('sort-icon', {\n                    invert: !sortData.isAscending,\n                  })}\n                >\n                  <FilterIcon size={10} />\n                </div>\n              )}\n            </div>\n\n            {tableStatistics.map((statistic) => (\n              <HeaderCell\n                key={statistic}\n                {...{statistic, sortData, setSortData}}\n                handleSort={handleSortClick.bind(this, statistic)}\n              />\n            ))}\n          </div>\n        </React.Fragment>\n      )}\n\n      {showDistricts &&\n        Object.keys(data.districts)\n          .sort((a, b) => sortingFunction(a, b))\n          .map((districtName) => (\n            <DistrictRow\n              data={data.districts[districtName]}\n              key={districtName}\n              {...{\n                districtName,\n                regionHighlighted,\n                setRegionHighlighted,\n                stateCode,\n                isPerMillion,\n                expandTable,\n              }}\n            />\n          ))}\n\n      {showDistricts && (\n        <div className=\"spacer-row\">\n          <div className=\"spacer\">\n            <p>{`End of ${t(STATE_NAMES[stateCode])}'s districts`}</p>\n            <div className=\"fold\" onClick={handleCollapse}>\n              <FoldUpIcon />\n            </div>\n          </div>\n        </div>\n      )}\n    </React.Fragment>\n  );\n}\n\nconst isEqual = (prevProps, currProps) => {\n  if (!equal(prevProps.data?.total, currProps.data?.total)) {\n    return false;\n  } else if (!equal(prevProps.data?.delta, currProps.data?.delta)) {\n    return false;\n  } else if (!equal(prevProps.isPerMillion, currProps.isPerMillion)) {\n    return false;\n  } else if (\n    (!equal(\n      prevProps.regionHighlighted.stateCode,\n      currProps.regionHighlighted.stateCode\n    ) &&\n      equal(prevProps.regionHighlighted.stateCode, prevProps.stateCode)) ||\n    equal(currProps.regionHighlighted.stateCode, currProps.stateCode)\n  ) {\n    return false;\n  } else if (\n    (!equal(\n      prevProps.regionHighlighted.districtName,\n      currProps.regionHighlighted.districtName\n    ) &&\n      equal(\n        prevProps.regionHighlighted.districtName,\n        prevProps.districtName\n      )) ||\n    equal(currProps.regionHighlighted.districtName, currProps.districtName)\n  ) {\n    return false;\n  } else if (!equal(prevProps.expandTable, currProps.expandTable)) {\n    return false;\n  } else return true;\n};\n\nexport default React.memo(Row, isEqual);\n"],"sourceRoot":""}