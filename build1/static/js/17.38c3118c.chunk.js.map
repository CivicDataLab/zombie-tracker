{"version":3,"sources":["components/HeaderCell.js","components/loaders/Table.js","workers/getDistricts.js","components/StateTable.js"],"names":["React","memo","handleSort","sortData","setSortData","statistic","t","useTranslation","longPressEvent","useLongPress","sortColumn","produce","sortDataDraft","delta","isPreventDefault","className","onClick","bind","this","classnames","invert","isAscending","size","toTitleCase","STATISTIC_CONFIGS","displayName","data","prevProps","currProps","equal","TableLoader","windowWidth","window","innerWidth","width","viewBox","height","speed","animate","x","y","rx","ry","addMethods","methods","module","exports","w","Worker","name","Row","lazy","states","stateCode","regionHighlighted","setRegionHighlighted","expandTable","setExpandTable","useSessionStorage","handleSortClick","useCallback","draftSortData","useTrail","from","transform","opacity","to","config","wobbly","useState","districts","setDistricts","tableOption","setTableOption","isPerMillion","isInfoVisible","sortingFunction","regionKeyA","regionKeyB","statisticA","getStatistic","statisticB","regionNameA","districtName","STATE_NAMES","regionNameB","localeCompare","prevTableOption","useEffect","workerInstance","worker","getDistricts","addEventListener","message","type","terminate","useTransition","TABLE_FADE_OUT","enter","TABLE_FADE_IN","leave","tableStatistics","TABLE_STATISTICS_EXPANDED","TABLE_STATISTICS","Fragment","style","gridTemplateColumns","length","map","key","Object","keys","filter","UNASSIGNED_STATE_CODE","sort","a","b","slice","DISTRICT_TABLE_COUNT","districtKey"],"mappings":"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","file":"static/js/17.38c3118c.chunk.js","sourcesContent":["import Tooltip from './Tooltip';\n\nimport {STATISTIC_CONFIGS} from '../constants';\nimport {toTitleCase} from '../utils/commonFunctions';\n\nimport {FilterIcon, InfoIcon} from '@primer/octicons-v2-react';\nimport classnames from 'classnames';\nimport equal from 'fast-deep-equal';\nimport produce from 'immer';\nimport React from 'react';\nimport {useTranslation} from 'react-i18next';\nimport {useLongPress} from 'react-use';\n\nfunction StateHeaderCell({handleSort, sortData, setSortData, statistic}) {\n  const {t} = useTranslation();\n\n  const onLongPress = () => {\n    if (sortData.sortColumn === statistic) {\n      setSortData(\n        produce(sortData, (sortDataDraft) => {\n          sortDataDraft.delta = !sortData.delta;\n        })\n      );\n    }\n  };\n  const longPressEvent = useLongPress(onLongPress, {isPreventDefault: false});\n\n  return (\n    <div\n      className=\"cell heading\"\n      onClick={handleSort.bind(this, statistic)}\n      {...longPressEvent}\n    >\n      {sortData.sortColumn === statistic && (\n        <div\n          className={classnames('sort-icon', {\n            invert: sortData.isAscending,\n            [`is-${statistic}`]: sortData.delta,\n          })}\n        >\n          <FilterIcon size={10} />\n        </div>\n      )}\n      <div>{t(toTitleCase(STATISTIC_CONFIGS[statistic].displayName))}</div>\n      {statistic === 'other' && (\n        <Tooltip data={'Migrated cases or non-COVID deaths'}>\n          <InfoIcon size={14} />\n        </Tooltip>\n      )}\n    </div>\n  );\n}\n\nconst isStateHeaderCellEqual = (prevProps, currProps) => {\n  if (!equal(prevProps.sortData, currProps.sortData)) {\n    return false;\n  } else {\n    return true;\n  }\n};\n\nexport default React.memo(StateHeaderCell, isStateHeaderCellEqual);\n","import React from 'react';\nimport ContentLoader from 'react-content-loader';\n\nconst TableLoader = () => {\n  const windowWidth = window.innerWidth;\n  const width = windowWidth > 769 ? 448 : windowWidth;\n  const height = 135;\n\n  return (\n    <div className=\"TableLoader\">\n      <ContentLoader\n        viewBox={`0 0 ${width} ${height}`}\n        height={height}\n        width={width}\n        speed={2}\n        animate={false}\n      >\n        <rect x=\"0\" y=\"0\" rx=\"3\" ry=\"3\" width={width} height=\"40\" />\n        <rect x=\"0\" y=\"45\" rx=\"3\" ry=\"3\" width={width} height=\"40\" />\n        <rect x=\"0\" y=\"90\" rx=\"3\" ry=\"3\" width={width} height=\"40\" />\n      </ContentLoader>\n    </div>\n  );\n};\n\nexport default TableLoader;\n","\n\t\t\t\tvar addMethods = require(\"../../node_modules/workerize-loader/dist/rpc-wrapper.js\")\n\t\t\t\tvar methods = [\"getDistricts\"]\n\t\t\t\tmodule.exports = function() {\n\t\t\t\t\tvar w = new Worker(__webpack_public_path__ + \"2607bfc30afc84ea4e21.worker.js\", { name: \"[hash].worker.js\" })\n\t\t\t\t\taddMethods(w, methods)\n\t\t\t\t\t\n\t\t\t\t\treturn w\n\t\t\t\t}\n\t\t\t","import HeaderCell from './HeaderCell';\nimport TableLoader from './loaders/Table';\nimport TableDeltaHelper from './snippets/TableDeltaHelper';\n\nimport {TABLE_FADE_IN, TABLE_FADE_OUT} from '../animations';\nimport {\n  DISTRICT_TABLE_COUNT,\n  STATE_NAMES,\n  TABLE_STATISTICS,\n  TABLE_STATISTICS_EXPANDED,\n  UNASSIGNED_STATE_CODE,\n} from '../constants';\nimport {getStatistic} from '../utils/commonFunctions';\n\nimport {\n  FilterIcon,\n  FoldDownIcon,\n  InfoIcon,\n  OrganizationIcon,\n  QuestionIcon,\n} from '@primer/octicons-v2-react';\nimport classnames from 'classnames';\nimport equal from 'fast-deep-equal';\nimport produce from 'immer';\nimport React, {useCallback, useEffect, useState, lazy} from 'react';\nimport {useTranslation} from 'react-i18next';\nimport {Link} from 'react-router-dom';\nimport {useTrail, useTransition, animated, config} from 'react-spring';\nimport {useSessionStorage} from 'react-use';\n// eslint-disable-next-line\nimport worker from 'workerize-loader!../workers/getDistricts';\n\nconst Row = lazy(() => import('./Row'));\n\nfunction StateTable({\n  stateCode,\n  data: states,\n  regionHighlighted,\n  setRegionHighlighted,\n  expandTable,\n  setExpandTable,\n}) {\n  const {t} = useTranslation();\n  const [sortData, setSortData] = useSessionStorage('sortData', {\n    sortColumn: 'confirmed',\n    isAscending: false,\n    delta: false,\n  });\n\n  const handleSortClick = useCallback(\n    (statistic) => {\n      if (sortData.sortColumn !== statistic) {\n        setSortData(\n          produce(sortData, (draftSortData) => {\n            draftSortData.sortColumn = statistic;\n          })\n        );\n      } else {\n        setSortData(\n          produce(sortData, (draftSortData) => {\n            draftSortData.isAscending = !sortData.isAscending;\n          })\n        );\n      }\n    },\n    [sortData, setSortData]\n  );\n  \n  const trail = useTrail(3, {\n    from: {transform: 'translate3d(0, 10px, 0)', opacity: 0},\n    to: {transform: 'translate3d(0, 0px, 0)', opacity: 1},\n    config: config.wobbly,\n  });\n  \n  const [districts, setDistricts] = useState();\n\n  const [tableOption, setTableOption] = useState('States');\n  const [isPerMillion, setIsPerMillion] = useState(false);\n  const [isInfoVisible, setIsInfoVisible] = useState(false);\n\n  const sortingFunction = useCallback(\n    (regionKeyA, regionKeyB) => {\n      if (sortData.sortColumn !== 'regionName') {\n        const statisticA = getStatistic(\n          districts?.[regionKeyA] || states[regionKeyA],\n          sortData.delta ? 'delta' : 'total',\n          sortData.sortColumn,\n          isPerMillion\n        );\n        const statisticB = getStatistic(\n          districts?.[regionKeyB] || states[regionKeyB],\n          sortData.delta ? 'delta' : 'total',\n          sortData.sortColumn,\n          isPerMillion\n        );\n        return sortData.isAscending\n          ? statisticA - statisticB\n          : statisticB - statisticA;\n      } else {\n        const regionNameA =\n          districts?.[regionKeyA]?.districtName || STATE_NAMES[regionKeyA];\n        const regionNameB =\n          districts?.[regionKeyB]?.districtName || STATE_NAMES[regionKeyB];\n        return sortData.isAscending\n          ? regionNameA.localeCompare(regionNameB)\n          : regionNameB.localeCompare(regionNameA);\n      }\n    },\n    [\n      districts,\n      isPerMillion,\n      sortData.delta,\n      sortData.isAscending,\n      sortData.sortColumn,\n      states,\n    ]\n  );\n\n  const _setTableOption = useCallback(() => {\n    setTableOption((prevTableOption) =>\n      prevTableOption === 'States' ? 'Districts' : 'States'\n    );\n  }, []);\n\n  useEffect(() => {\n    const workerInstance = worker();\n    workerInstance.getDistricts(states);\n    workerInstance.addEventListener('message', (message) => {\n      if (message.data.type !== 'RPC') {\n        setDistricts(message.data);\n        workerInstance.terminate();\n      }\n    });\n  }, [tableOption, states]);\n\n  const transition = useTransition(isInfoVisible, null, {\n    from: TABLE_FADE_OUT,\n    enter: TABLE_FADE_IN,\n    leave: TABLE_FADE_OUT,\n  });\n\n  const tableStatistics = expandTable\n    ? TABLE_STATISTICS_EXPANDED\n    : TABLE_STATISTICS;\n\n  return (\n    <React.Fragment>\n      {/*<div className=\"table-top\">\n        <animated.div\n          className={classnames('option-toggle', {\n            'is-highlighted': tableOption === 'Districts',\n          })}\n          onClick={_setTableOption}\n          style={trail[0]}\n        >\n          <OrganizationIcon size={14} />\n        </animated.div>\n\n        <animated.div\n          className={classnames('million-toggle', {\n            'is-highlighted': isPerMillion,\n          })}\n          onClick={setIsPerMillion.bind(this, !isPerMillion)}\n          style={trail[0]}\n        >\n          <span>1M</span>\n        </animated.div>\n\n        <animated.div\n          className={classnames('info-toggle', {\n            'is-highlighted': isInfoVisible,\n          })}\n          onClick={setIsInfoVisible.bind(this, !isInfoVisible)}\n          style={trail[0]}\n        >\n          <QuestionIcon size={14} />\n        </animated.div>\n\n        <animated.div\n          className={classnames('expand-table-toggle', {\n            'is-highlighted': expandTable,\n          })}\n          style={trail[1]}\n          onClick={setExpandTable.bind(this, !expandTable)}\n        >\n          <FoldDownIcon size={16} />\n        </animated.div>\n      </div>\n\n      {transition.map(({item, key, props}) =>\n        item ? (\n          <animated.div key={key} className=\"table-helper\" style={props}>\n            <div className=\"helper-top\">\n              <div className=\"helper-left\">\n                <div className=\"info-item\">\n                  <span>\n                    <OrganizationIcon size={14} />\n                  </span>\n                  <p>{`Toggle between States/Districts`}</p>\n                </div>\n\n                <div className=\"info-item\">\n                  <h5>1M</h5>\n                  <p>Per Million of Population</p>\n                </div>\n\n                <div className=\"info-item sort\">\n                  <span>\n                    <FilterIcon size={14} />\n                  </span>\n                  <p>Sort by Descending</p>\n                </div>\n\n                <div className=\"info-item sort invert\">\n                  <span>\n                    <FilterIcon size={14} />\n                  </span>\n                  <p>Sort by Ascending</p>\n                </div>\n\n                <div className=\"info-item sort\">\n                  <TableDeltaHelper />\n                </div>\n\n                <div className=\"info-item notes\">\n                  <span>\n                    <InfoIcon size={15} />\n                  </span>\n                  <p>Notes</p>\n                </div>\n              </div>\n            </div>\n\n            <h5 className=\"text\">\n              {t('Compiled from State Govt. numbers')},{' '}\n              <Link to=\"/about\">{t('know more')}!</Link>\n            </h5>\n          </animated.div>\n        ) : null\n      )} */}\n\n      <div className=\"table-container\">\n        <div\n          className=\"table fadeInUp\"\n          style={{\n            gridTemplateColumns: `repeat(${tableStatistics.length + 1}, auto)`,\n          }}\n        >\n          <div className=\"row heading\">\n            <div\n              className=\"cell heading\"\n              onClick={handleSortClick.bind(this, 'regionName')}\n            >\n              <div>{t(tableOption === 'States' ? 'State/UT' : 'District')}</div>\n              {sortData.sortColumn === 'regionName' && (\n                <div\n                  className={classnames('sort-icon', {\n                    invert: sortData.isAscending,\n                  })}\n                >\n                  <FilterIcon size={10} />\n                </div>\n              )}\n            </div>\n\n            {tableStatistics.map((statistic) => (\n              <HeaderCell\n                key={statistic}\n                {...{statistic, sortData, setSortData}}\n                handleSort={handleSortClick.bind(this, statistic)}\n              />\n            ))}\n          </div>\n\n          {tableOption === 'States' &&\n            Object.keys(states)\n              .filter(\n                (stateCode) =>\n                  stateCode !== 'TT' &&\n                  !(stateCode === UNASSIGNED_STATE_CODE && isPerMillion)\n              )\n              .sort((a, b) => sortingFunction(a, b))\n              .map((stateCode) => {\n                return (\n                  <Row\n                    key={stateCode}\n                    data={states[stateCode]}\n                    {...{\n                      stateCode,\n                      isPerMillion,\n                      regionHighlighted,\n                      setRegionHighlighted,\n                      expandTable,\n                    }}\n                  />\n                );\n              })}\n\n          {/*{tableOption === 'Districts' && !districts && <TableLoader />}*/}\n\n          {tableOption === 'Districts' &&\n            districts &&\n            Object.keys(districts)\n              .sort((a, b) => sortingFunction(a, b))\n              .slice(0, DISTRICT_TABLE_COUNT)\n              .map((districtKey) => {\n                return (\n                  <Row\n                    key={districtKey}\n                    data={districts[districtKey]}\n                    districtName={districts[districtKey].districtName}\n                    {...{\n                      isPerMillion,\n                      regionHighlighted,\n                      setRegionHighlighted,\n                      expandTable,\n                    }}\n                  />\n                );\n              })}\n\n          {/*<Row\n            key={'TT'}\n            data={states['TT']}\n            stateCode={'TT'}\n            {...{\n              isPerMillion,\n              regionHighlighted,\n              setRegionHighlighted,\n              expandTable,\n            }}\n          />*/}\n        </div>\n      </div>\n    </React.Fragment>\n  );\n}\n\nconst isEqual = (prevProps, currProps) => {\n  if (\n    !equal(\n      prevProps.regionHighlighted?.districtName,\n      currProps.regionHighlighted?.districtName\n    )\n  ) {\n    return false;\n  } else if (\n    !equal(\n      prevProps.regionHighlighted?.stateCode,\n      currProps.regionHighlighted?.stateCode\n    )\n  ) {\n    return false;\n  } else if (!equal(prevProps.expandTable, currProps.expandTable)) {\n    return false;\n  } else return true;\n};\n\nexport default React.memo(StateTable, isEqual);\n"],"sourceRoot":""}