{"version":3,"sources":["../node_modules/lodash/_Symbol.js","../node_modules/react-use/esm/useIsomorphicLayoutEffect.js","../node_modules/react-use/esm/useMeasure.js","../node_modules/lodash/clamp.js","../node_modules/lodash/_baseClamp.js","../node_modules/lodash/toNumber.js","../node_modules/lodash/isObject.js","../node_modules/lodash/isSymbol.js","../node_modules/lodash/_baseGetTag.js","../node_modules/lodash/_root.js","../node_modules/lodash/_freeGlobal.js","../node_modules/lodash/_getRawTag.js","../node_modules/lodash/_objectToString.js","../node_modules/lodash/isObjectLike.js","../../src/utils/math.ts","../../src/utils/utils.ts","../../src/utils/state.ts","../../src/utils/event.ts","../../src/Controller.ts","../../src/hooks/useRecognizers.ts","../../src/recognizers/Recognizer.ts","../../src/recognizers/CoordinatesRecognizer.ts","../../src/recognizers/DragRecognizer.ts","../../src/utils/config.ts","../../src/hooks/useDrag.ts","../node_modules/react-use/esm/useEvent.js","../node_modules/react-use/esm/useKey.js","../node_modules/react-use/esm/useKeyPress.js","../node_modules/react-use/esm/useKeyPressEvent.js"],"names":["Symbol","require","module","exports","useIsomorphicLayoutEffect","window","useLayoutEffect","useEffect","defaultState","x","y","width","height","top","left","bottom","right","isClient","ResizeObserver","_a","useState","element","ref","_b","rect","setRect","observer","useMemo","entries","contentRect","top_1","observe","disconnect","baseClamp","toNumber","number","lower","upper","undefined","isObject","isSymbol","reTrim","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","parseInt","value","other","valueOf","replace","isBinary","test","slice","type","baseGetTag","isObjectLike","getRawTag","objectToString","symToStringTag","toStringTag","Object","freeGlobal","freeSelf","self","root","Function","global","objectProto","prototype","hasOwnProperty","nativeObjectToString","toString","isOwn","call","tag","unmasked","e","result","addV","v1","v2","v","subV","calculateVelocity","delta","delta_t","len","Math","calculateVelocities","Array","calculateDistance","movement","calculateDirection","calculateAllKinematics","velocities","velocity","distance","direction","getIntentionalDisplacement","threshold","abs","rubberband","dimension","constant","rubberband2","rubberbandIfOutOfBounds","position","min","max","minMax","noop","chainFns","fns","args","fn","def","matchKeysFromObject","obj","matchingObject","o","key","valueFn","getInitialState","initialCommon","_active","_blocked","_intentional","_movement","_initial","_lastEventType","event","values","offset","lastOffset","initial","previous","first","last","active","timeStamp","startTime","elapsedTime","cancel","canceled","memo","initialCoordinates","axis","xy","vxvy","initialDistanceAngle","da","vdva","origin","turns","shared","hovering","scrolling","wheeling","dragging","moving","pinching","touches","buttons","down","shiftKey","altKey","metaKey","ctrlKey","drag","_isTap","_delayedEvent","tap","swipe","pinch","wheel","move","scroll","setListeners","add","action","listeners","eventName","el","addListeners","removeListeners","getTouchEvents","changedTouches","getGenericEventData","touchEvents","getModifierKeys","getPointerEventValues","clientX","clientY","Controller","state","timeouts","domListeners","windowListeners","bindings","clean","stateKey","resetBindings","domTarget","getDomTarget","config","addWindowListeners","removeWindowListeners","addDomTargetListeners","target","addBindings","eventNamesArray","getBindings","captureString","fnsArray","getBind","useRecognizers","handlers","classes","nativeHandlers","controller","current","nativeRefs","bind","RecognizerClass","React","Recognizer","debounced","setTimeout","ms","clearTimeout","getStartGestureState","bounds","vector","fireGestureHandler","intentionalX","intentionalY","forceFlag","newMemo","updateSharedState","this","updateGestureState","getGenericPayload","isStartEvent","checkIntentionality","getMovement","t0","t1","intentional","prevMovement","i0","i1","getInternalMovement","_m0","_m1","intentionalityCheck","_i0","_i1","_rubberband","enabled","CoordinatesRecognizer","_ix","_iy","intentionalMovement","absX","absY","configAxis","lockDirection","getKinematics","movementDetection","mapStateValues","DragRecognizer","ingKey","wasTouch","isEventTypeTouch","dragShouldStart","setPointers","currentTarget","pointerId","removePointers","dragListeners","isTouch","onDragStart","onDragChange","genericEventData","kinematics","onDragEnd","vx","vy","mx","my","ix","iy","endState","swipeVelocity","svx","svy","swipeDistance","sx","sy","onCancel","requestAnimationFrame","startDrag","startState","defaultWindow","defaultCoordinatesOptions","getInternalGenericOptions","eventOptions","passive","capture","pointer","restConfig","getInternalGestureOptions","gestureConfig","getInternalCoordinatesOptions","coordinatesConfig","internalOptions","boundsArray","getInternalDragOptions","dragConfig","dragOptions","DEFAULT_SWIPE_VELOCITY","DEFAULT_SWIPE_DISTANCE","delay","filterTaps","internalCoordinatesOptions","useDrag","handler","mergedConfig","defaultTarget","isListenerType1","addEventListener","isListenerType2","on","useEvent","name","options","removeEventListener","off","JSON","stringify","useKey","opts","deps","useMemoHandler","keyFilter","predicate","handlerEvent","useKeyPress","set","useKeyPressEvent","keydown","keyup","useKeyPressDefault","pressed","useUpdateEffect"],"mappings":"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","file":"static/js/13.ed3c497e.chunk.js","sourcesContent":["var root = require('./_root');\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\nmodule.exports = Symbol;\n","import { useEffect, useLayoutEffect } from 'react';\nvar useIsomorphicLayoutEffect = typeof window !== 'undefined' ? useLayoutEffect : useEffect;\nexport default useIsomorphicLayoutEffect;\n","import { useState, useMemo } from 'react';\nimport useIsomorphicLayoutEffect from './useIsomorphicLayoutEffect';\nimport { isClient } from './util';\nvar defaultState = {\n    x: 0,\n    y: 0,\n    width: 0,\n    height: 0,\n    top: 0,\n    left: 0,\n    bottom: 0,\n    right: 0,\n};\nvar useMeasure = function () {\n    var _a = useState(null), element = _a[0], ref = _a[1];\n    var _b = useState(defaultState), rect = _b[0], setRect = _b[1];\n    var observer = useMemo(function () {\n        return new window.ResizeObserver(function (entries) {\n            if (entries[0]) {\n                var _a = entries[0].contentRect, x = _a.x, y = _a.y, width = _a.width, height = _a.height, top_1 = _a.top, left = _a.left, bottom = _a.bottom, right = _a.right;\n                setRect({ x: x, y: y, width: width, height: height, top: top_1, left: left, bottom: bottom, right: right });\n            }\n        });\n    }, []);\n    useIsomorphicLayoutEffect(function () {\n        if (!element)\n            return;\n        observer.observe(element);\n        return function () {\n            observer.disconnect();\n        };\n    }, [element]);\n    return [ref, rect];\n};\nvar useMeasureMock = function () { return [function () { }, defaultState]; };\nexport default (isClient && !!window.ResizeObserver) ? useMeasure : useMeasureMock;\n","var baseClamp = require('./_baseClamp'),\n    toNumber = require('./toNumber');\n\n/**\n * Clamps `number` within the inclusive `lower` and `upper` bounds.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Number\n * @param {number} number The number to clamp.\n * @param {number} [lower] The lower bound.\n * @param {number} upper The upper bound.\n * @returns {number} Returns the clamped number.\n * @example\n *\n * _.clamp(-10, -5, 5);\n * // => -5\n *\n * _.clamp(10, -5, 5);\n * // => 5\n */\nfunction clamp(number, lower, upper) {\n  if (upper === undefined) {\n    upper = lower;\n    lower = undefined;\n  }\n  if (upper !== undefined) {\n    upper = toNumber(upper);\n    upper = upper === upper ? upper : 0;\n  }\n  if (lower !== undefined) {\n    lower = toNumber(lower);\n    lower = lower === lower ? lower : 0;\n  }\n  return baseClamp(toNumber(number), lower, upper);\n}\n\nmodule.exports = clamp;\n","/**\n * The base implementation of `_.clamp` which doesn't coerce arguments.\n *\n * @private\n * @param {number} number The number to clamp.\n * @param {number} [lower] The lower bound.\n * @param {number} upper The upper bound.\n * @returns {number} Returns the clamped number.\n */\nfunction baseClamp(number, lower, upper) {\n  if (number === number) {\n    if (upper !== undefined) {\n      number = number <= upper ? number : upper;\n    }\n    if (lower !== undefined) {\n      number = number >= lower ? number : lower;\n    }\n  }\n  return number;\n}\n\nmodule.exports = baseClamp;\n","var isObject = require('./isObject'),\n    isSymbol = require('./isSymbol');\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = toNumber;\n","/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\nmodule.exports = isObject;\n","var baseGetTag = require('./_baseGetTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && baseGetTag(value) == symbolTag);\n}\n\nmodule.exports = isSymbol;\n","var Symbol = require('./_Symbol'),\n    getRawTag = require('./_getRawTag'),\n    objectToString = require('./_objectToString');\n\n/** `Object#toString` result references. */\nvar nullTag = '[object Null]',\n    undefinedTag = '[object Undefined]';\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\nmodule.exports = baseGetTag;\n","var freeGlobal = require('./_freeGlobal');\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\nmodule.exports = root;\n","/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\nmodule.exports = freeGlobal;\n","var Symbol = require('./_Symbol');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\nmodule.exports = getRawTag;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\nmodule.exports = objectToString;\n","/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\nmodule.exports = isObjectLike;\n","// vector add\nexport function addV<T extends number[]>(v1: T, v2: T): T {\n  return v1.map((v, i) => v + v2[i]) as T\n}\n\n// vector substract\nexport function subV<T extends number[]>(v1: T, v2: T): T {\n  return v1.map((v, i) => v - v2[i]) as T\n}\n/**\n * Calculates velocity\n * @param delta the difference between current and previous vectors\n * @param delta_t the time offset\n * @param len the length of the delta vector\n * @returns velocity\n */\nexport function calculateVelocity(delta: number[], delta_t: number, len: number): number {\n  len = len || Math.hypot(...delta)\n  return delta_t ? len / delta_t : 0\n}\n\n/**\n * Calculates velocities vector\n * @template T the expected vector type\n * @param delta the difference between current and previous vectors\n * @param delta_t the time offset\n * @returns velocities vector\n */\nexport function calculateVelocities<T extends number[]>(delta: T, delta_t: number): T {\n  return (delta_t ? delta.map(v => v / delta_t) : Array(delta.length).fill(0)) as T\n}\n\n/**\n * Calculates distance\n * @param movement the difference between current and initial vectors\n * @returns distance\n */\nexport function calculateDistance(movement: number[]): number {\n  return Math.hypot(...movement)\n}\n\n/**\n * Calculates direction\n * @template T the expected vector type\n * @param delta\n * @param len\n * @returns direction\n */\nexport function calculateDirection<T extends number[]>(delta: T, len?: number): T {\n  len = len || Math.hypot(...delta) || 1\n  return delta.map(v => v / len!) as T\n}\n\ninterface Kinematics<T extends number[]> {\n  velocities: T\n  velocity: number\n  distance: number\n  direction: T\n}\n\n/**\n * Calculates all kinematics\n * @template T the expected vector type\n * @param movement the difference between current and initial vectors\n * @param delta the difference between current and previous vectors\n * @param delta_t the time difference between current and previous timestamps\n * @returns all kinematics\n */\nexport function calculateAllKinematics<T extends number[]>(movement: T, delta: T, delta_t: number): Kinematics<T> {\n  const len = Math.hypot(...delta)\n\n  return {\n    velocities: calculateVelocities(delta, delta_t),\n    velocity: calculateVelocity(delta, delta_t, len),\n    distance: calculateDistance(movement),\n    direction: calculateDirection(delta, len),\n  }\n}\n\nexport function getIntentionalDisplacement(movement: number, threshold: number): number | false {\n  const abs = Math.abs(movement)\n  return abs >= threshold ? Math.sign(movement) * threshold : false\n}\n\nfunction minMax(value: number, min: number, max: number) {\n  return Math.max(min, Math.min(value, max))\n}\n\n// Based on @aholachek ;)\n// https://twitter.com/chpwn/status/285540192096497664\n// iOS constant = 0.55\n\n// https://medium.com/@nathangitter/building-fluid-interfaces-ios-swift-9732bb934bf5\nfunction rubberband2(distance: number, constant: number) {\n  // default constant from the article is 0.7\n  return Math.pow(distance, constant * 5)\n}\n\nfunction rubberband(distance: number, dimension: number, constant: number) {\n  if (dimension === 0 || Math.abs(dimension) === Infinity) return rubberband2(distance, constant)\n  return (distance * dimension * constant) / (dimension + constant * distance)\n}\n\nexport function rubberbandIfOutOfBounds(position: number, min: number, max: number, constant = 0.15) {\n  if (constant === 0) return minMax(position, min, max)\n\n  if (position < min) {\n    return -rubberband(min - position, max - min, constant) + min\n  }\n  if (position > max) {\n    return rubberband(position - max, max - min, constant) + max\n  }\n  return position\n}\n","import { Fn, Vector2 } from '../types'\n\n// blank function\nexport function noop() {}\n// returns a function that chains all functions given as parameters\nexport const chainFns = (...fns: Fn[]): Fn => (...args: any[]) => fns.forEach(fn => fn(...args))\n\nexport const def = {\n  array: <T>(value: T | T[]): T[] => (Array.isArray(value) ? value : [value, value]),\n  withDefault: <T>(value: T | undefined, defaultIfUndefined: T): T => (value !== void 0 ? value : defaultIfUndefined),\n}\n\nexport function matchKeysFromObject<T extends object, K extends object>(obj: T, matchingObject: K): Partial<T> {\n  const o: Partial<T> = {}\n  Object.entries(obj).forEach(\n    ([key, value]) => (value !== void 0 || key in matchingObject) && (o[key as keyof T] = value)\n  )\n  return o\n}\n\nexport function valueFn(v: Vector2 | (() => Vector2)) {\n  return typeof v === 'function' ? v() : v\n}\n","import { noop } from './utils'\nimport { CommonGestureState, Coordinates, State, DistanceAngle, Vector2 } from '../types'\n\nexport function getInitialState(): State {\n  // common initial state for all gestures\n  const initialCommon: CommonGestureState = {\n    _active: false,\n    _blocked: false,\n    _intentional: [false, false],\n    _movement: [0, 0],\n    _initial: [0, 0],\n    _lastEventType: undefined,\n    event: undefined,\n    // currentTarget: undefined,\n    // pointerId: undefined,\n    values: [0, 0],\n    velocities: [0, 0],\n    delta: [0, 0],\n    movement: [0, 0],\n    offset: [0, 0],\n    lastOffset: [0, 0],\n    direction: [0, 0],\n    initial: [0, 0],\n    previous: [0, 0],\n    first: false,\n    last: false,\n    active: false,\n    timeStamp: 0,\n    startTime: 0,\n    elapsedTime: 0,\n    cancel: noop,\n    canceled: false,\n    memo: undefined,\n    args: undefined,\n  }\n\n  // initial state for coordinates-based gestures\n  const initialCoordinates: Coordinates = {\n    axis: undefined,\n    xy: [0, 0] as Vector2,\n    vxvy: [0, 0] as Vector2,\n    velocity: 0,\n    distance: 0,\n  }\n\n  // initial state for distance and angle-based gestures (pinch)\n  const initialDistanceAngle: DistanceAngle = {\n    da: [0, 0] as Vector2,\n    vdva: [0, 0] as Vector2,\n    origin: undefined,\n    turns: 0,\n  }\n\n  // initial state object (used by the gesture controller)\n  return {\n    shared: {\n      hovering: false,\n      scrolling: false,\n      wheeling: false,\n      dragging: false,\n      moving: false,\n      pinching: false,\n      touches: 0,\n      buttons: 0,\n      down: false,\n      shiftKey: false,\n      altKey: false,\n      metaKey: false,\n      ctrlKey: false,\n    },\n    drag: {\n      ...initialCommon,\n      ...initialCoordinates,\n      _isTap: true,\n      _delayedEvent: false,\n      tap: false,\n      swipe: [0, 0],\n    },\n    pinch: { ...initialCommon, ...initialDistanceAngle },\n    wheel: { ...initialCommon, ...initialCoordinates },\n    move: { ...initialCommon, ...initialCoordinates },\n    scroll: { ...initialCommon, ...initialCoordinates },\n  }\n}\n","import { Fn, EventOptions, UseGestureEvent, Vector2, WebKitGestureEvent } from '../types'\n\nconst isBrowser = typeof window !== 'undefined'\n\nexport const supportsTouchEvents = () => isBrowser && window.ontouchstart === null\n\nconst setListeners = (add: boolean) => (el: EventTarget, listeners: [string, Fn][], options: EventOptions): void => {\n  const action = add ? 'addEventListener' : 'removeEventListener'\n  listeners.forEach(([eventName, fn]) => el[action](eventName, fn, options))\n}\n\n/**\n * Whether the browser supports GestureEvent (ie Safari)\n * @returns true if the browser supports gesture event\n */\nexport function supportsGestureEvents(): boolean {\n  try {\n    // TODO [TS] possibly find GestureEvent definitions?\n    // @ts-ignore: no type definitions for webkit GestureEvents\n    return 'constructor' in GestureEvent\n  } catch (e) {\n    return false\n  }\n}\n\nexport const addListeners = setListeners(true)\nexport const removeListeners = setListeners(false)\n\ninterface ModifierKeys {\n  shiftKey: boolean\n  altKey: boolean\n  metaKey: boolean\n  ctrlKey: boolean\n}\n\n/**\n * Gets modifier keys from event\n * @param event\n * @returns modifier keys\n */\nexport function getModifierKeys(event: UseGestureEvent): ModifierKeys {\n  const { shiftKey, altKey, metaKey, ctrlKey } = event\n  return { shiftKey, altKey, metaKey, ctrlKey }\n}\n\nfunction getTouchEvents(event: UseGestureEvent) {\n  if ('touches' in event) {\n    const { touches, changedTouches } = event\n    return touches.length > 0 ? touches : changedTouches\n  }\n  return null\n}\n\nexport function getGenericEventData(event: React.MouseEvent | React.TouchEvent | React.PointerEvent) {\n  const buttons = 'buttons' in event ? event.buttons : 0\n  const touchEvents = getTouchEvents(event)\n  const touches = (touchEvents && touchEvents.length) || 0\n  const down = touches > 0 || buttons > 0\n  return { touches, down, buttons, ...getModifierKeys(event) }\n}\n\ntype Values = { values: Vector2 }\n\n/**\n * Gets scroll event values\n * @param event\n * @returns scroll event values\n */\nexport function getScrollEventValues(event: UseGestureEvent): Values {\n  // If the currentTarget is the window then we return the scrollX/Y position.\n  // If not (ie the currentTarget is a DOM element), then we return scrollLeft/Top\n  const { scrollX, scrollY, scrollLeft, scrollTop } = event.currentTarget as Element & Window\n  return { values: [scrollX || scrollLeft || 0, scrollY || scrollTop || 0] }\n}\n\n/**\n * Gets wheel event values.\n * @param event\n * @returns wheel event values\n */\nexport function getWheelEventValues(event: UseGestureEvent<React.WheelEvent>): Values {\n  const { deltaX, deltaY } = event\n  //TODO implement polyfill ?\n  // https://developer.mozilla.org/en-US/docs/Web/Events/wheel#Polyfill\n  return { values: [deltaX, deltaY] }\n}\n\n/**\n * Gets pointer event values.\n * @param event\n * @returns pointer event values\n */\nexport function getPointerEventValues(event: React.MouseEvent | React.TouchEvent | React.PointerEvent): Values {\n  const touchEvents = getTouchEvents(event)\n  const { clientX, clientY } = touchEvents ? touchEvents[0] : (event as React.PointerEvent)\n  return { values: [clientX, clientY] }\n}\n\nconst WEBKIT_DISTANCE_SCALE_FACTOR = 260\n\n/**\n * Gets webkit gesture event values.\n * @param event\n * @returns webkit gesture event values\n */\nexport function getWebkitGestureEventValues(event: WebKitGestureEvent): Values {\n  return { values: [event.scale * WEBKIT_DISTANCE_SCALE_FACTOR, event.rotation] as Vector2 }\n}\n\n/**\n * Gets two touches event data\n * @param event\n * @returns two touches event data\n */\nexport function getTwoTouchesEventData(event: React.TouchEvent) {\n  const { touches } = event\n  const dx = touches[1].clientX - touches[0].clientX\n  const dy = touches[1].clientY - touches[0].clientY\n\n  const values: Vector2 = [Math.hypot(dx, dy), -(Math.atan2(dx, dy) * 180) / Math.PI]\n  const origin: Vector2 = [(touches[1].clientX + touches[0].clientX) / 2, (touches[1].clientY + touches[0].clientY) / 2]\n\n  return { values, origin }\n}\n","import {\n  StateKey,\n  State,\n  Fn,\n  ReactEventHandlerKey,\n  ReactEventHandlers,\n  InternalConfig,\n  InternalHandlers,\n} from './types'\nimport { getInitialState } from './utils/state'\nimport { addListeners, removeListeners } from './utils/event'\nimport { chainFns } from './utils/utils'\n\ntype GestureTimeouts = Partial<{ [stateKey in StateKey]: number }>\ntype WindowListeners = Partial<{ [stateKey in StateKey]: [string, Fn][] }>\ntype Bindings = Partial<{ [eventName in ReactEventHandlerKey]: Fn[] }>\n\n/**\n * The controller will keep track of the state for all gestures and also keep\n * track of timeouts, and window listeners.\n *\n * @template BinderType the type the bind function should return\n */\nexport default class Controller {\n  public config!: InternalConfig\n  public handlers!: Partial<InternalHandlers>\n  public state: State = getInitialState() // state for all gestures\n  public timeouts: GestureTimeouts = {} // keeping track of timeouts for debounced gestures (such as move, scroll, wheel)\n  private domListeners: [string, Fn][] = [] // when config.domTarget is set, we attach events directly to the dom\n  private windowListeners: WindowListeners = {} // keeps track of window listeners added by gestures (drag only at the moment)\n  private bindings: Bindings = {} // an object holding the handlers associated to the gestures\n\n  /**\n   * Function ran on component unmount: cleans timeouts and removes dom listeners set by the bind function.\n   */\n  public clean = (): void => {\n    this.resetBindings()\n    Object.values(this.timeouts).forEach(clearTimeout)\n    Object.keys(this.windowListeners).forEach(stateKey => this.removeWindowListeners(stateKey as StateKey))\n  }\n\n  /**\n   * Function run every time the bind function is run (ie on every render).\n   * Resets the binding object and remove dom listeners attached to config.domTarget\n   */\n  public resetBindings = (): void => {\n    this.bindings = {}\n    const domTarget = this.getDomTarget()\n    if (domTarget) {\n      removeListeners(domTarget, this.domListeners, this.config.eventOptions)\n      this.domListeners = []\n    }\n  }\n\n  /**\n   * Returns the domTarget element and parses a ref if needed.\n   */\n  private getDomTarget = (): EventTarget | null | undefined => {\n    const { domTarget } = this.config\n    return domTarget && 'current' in domTarget ? domTarget.current : domTarget\n  }\n\n  /**\n   * Commodity function to let recognizers simply add listeners to config.window.\n   */\n  public addWindowListeners = (stateKey: StateKey, listeners: [string, Fn][]): void => {\n    if (!this.config.window) return\n    // we use this.windowListeners to keep track of the listeners we add\n    this.windowListeners[stateKey] = listeners\n    addListeners(this.config.window, listeners, this.config.eventOptions)\n  }\n\n  /**\n   * Commodity function to let recognizers simply remove listeners to config.window.\n   */\n  public removeWindowListeners = (stateKey: StateKey): void => {\n    if (!this.config.window) return\n    const listeners = this.windowListeners[stateKey]\n    if (listeners) {\n      removeListeners(this.config.window, listeners, this.config.eventOptions)\n      delete this.windowListeners[stateKey]\n    }\n  }\n\n  /**\n   * When config.domTarget is set, this function will add dom listeners to it\n   */\n  public addDomTargetListeners = (target: EventTarget): void => {\n    /** We iterate on the entries of this.binding for each event, then we chain\n     * the array of functions mapped to it and push them to this.domListeners\n     */\n    Object.entries(this.bindings).forEach(([event, fns]) => {\n      this.domListeners.push([event.substr(2).toLowerCase(), chainFns(...(fns as Fn[]))])\n    })\n\n    addListeners(target, this.domListeners, this.config.eventOptions)\n  }\n\n  /**\n   * this.bindings is an object which keys match ReactEventHandlerKeys.\n   * Since a recognizer might want to bind a handler function to an event key already used by a previously\n   * added recognizer, we need to make sure that each event key is an array of all the functions mapped for\n   * that key.\n   */\n  public addBindings = (eventNames: ReactEventHandlerKey | ReactEventHandlerKey[], fn: Fn): void => {\n    const eventNamesArray = !Array.isArray(eventNames) ? [eventNames] : eventNames\n    eventNamesArray.forEach(eventName => {\n      if (this.bindings[eventName]) this.bindings[eventName]!.push(fn)\n      else this.bindings[eventName] = [fn]\n    })\n  }\n\n  /**\n   * getBindings will return an object that will be bound by users\n   * to the react component they want to interact with.\n   */\n  public getBindings = (): ReactEventHandlers => {\n    const bindings: ReactEventHandlers = {}\n    const { captureString } = this.config\n\n    Object.entries(this.bindings).forEach(([event, fns]) => {\n      const fnsArray = Array.isArray(fns) ? fns : [fns]\n      const key = (event + captureString) as ReactEventHandlerKey\n      bindings[key] = chainFns(...(fnsArray as Fn[]))\n    })\n\n    return bindings\n  }\n\n  public getBind = () => {\n    // If config.domTarget is set we add event listeners to it and return the clean function.\n    if (this.config.domTarget) {\n      const domTarget = this.getDomTarget()\n      domTarget && this.addDomTargetListeners(domTarget)\n      return this.clean\n    }\n\n    // If not, we return an object that contains gesture handlers mapped to react handler event keys.\n    return this.getBindings()\n  }\n}\n","/* eslint-disable react-hooks/exhaustive-deps */\n\nimport React from 'react'\nimport Controller from '../Controller'\nimport {\n  InternalConfig,\n  HookReturnType,\n  InternalHandlers,\n  RecognizerClasses,\n  GenericOptions,\n  NativeHandlersPartial,\n  ReactEventHandlerKey,\n  Fn,\n} from '../types'\n/**\n * @private\n *\n * Utility hook called by all gesture hooks and that will be responsible for the internals.\n *\n * @param {Partial<InternalHandlers>} handlers\n * @param {RecognizerClasses} classes\n * @param {InternalConfig} config\n * @param {NativeHandlersPartial} nativeHandlers - native handlers such as onClick, onMouseDown, etc.\n * @returns {(...args: any[]) => HookReturnType<Config>}\n */\nexport default function useRecognizers<Config extends Partial<GenericOptions>>(\n  handlers: Partial<InternalHandlers>,\n  classes: RecognizerClasses,\n  config: InternalConfig,\n  nativeHandlers?: NativeHandlersPartial\n): (...args: any[]) => HookReturnType<Config> {\n  // The gesture controller keeping track of all gesture states\n  const controller = React.useMemo(() => {\n    const current = new Controller()\n\n    /**\n     * The bind function will create gesture recognizers and return the right\n     * bind object depending on whether `domTarget` was specified in the config object.\n     */\n    const bind = (...args: any[]) => {\n      current.resetBindings()\n      for (let RecognizerClass of classes) {\n        new RecognizerClass(current, args).addBindings()\n      }\n\n      // we also add event bindings for native handlers\n      if (controller.nativeRefs) {\n        for (let eventName in controller.nativeRefs)\n          current.addBindings(\n            eventName as ReactEventHandlerKey,\n            // @ts-ignore we're cheating when it comes to event type :(\n            controller.nativeRefs[eventName] as Fn\n          )\n      }\n\n      return current.getBind() as HookReturnType<Config>\n    }\n\n    return { nativeRefs: nativeHandlers, current, bind }\n  }, [])\n\n  // We reassign the config and handlers to the controller on every render.\n  controller.current!.config = config\n  controller.current!.handlers = handlers\n  // We assign nativeHandlers, otherwise they won't be refreshed on the next render.\n  controller.nativeRefs = nativeHandlers\n\n  // Run controller clean functions on unmount.\n  React.useEffect(() => controller.current!.clean, [])\n\n  return controller.bind\n}\n","import Controller from '../Controller'\nimport {\n  StateKey,\n  SharedGestureState,\n  Fn,\n  UseGestureEvent,\n  IngKey,\n  InternalConfig,\n  GestureState,\n  PartialGestureState,\n  Vector2,\n  FalseOrNumber,\n  FullGestureState,\n} from '../types'\nimport { getInitialState } from '../utils/state'\nimport { subV, addV, getIntentionalDisplacement, rubberbandIfOutOfBounds } from '../utils/math'\nimport { valueFn } from '../utils/utils'\n\n/**\n * @private\n * Recognizer abstract class.\n *\n * @protected\n * @abstract\n * @type {StateKey<T>} whether the Recognizer should deal with coordinates or distance / angle\n */\nexport default abstract class Recognizer<T extends StateKey> {\n  protected abstract ingKey: IngKey // dragging, scrolling, etc.\n  protected debounced: Boolean = true\n\n  /**\n   * Creates an instance of a gesture recognizer.\n   * @param stateKey drag, move, pinch, etc.\n   * @param controller the controller attached to the gesture\n   * @param [args] the args that should be passed to the gesture handler\n   */\n  constructor(\n    protected readonly stateKey: T,\n    protected readonly controller: Controller,\n    protected readonly args: any[] = []\n  ) {}\n\n  // Returns the gesture config\n  protected get config(): NonNullable<InternalConfig[T]> {\n    return this.controller.config[this.stateKey]!\n  }\n\n  // Is the gesture enabled\n  protected get enabled(): boolean {\n    return this.controller.config.enabled && this.config.enabled\n  }\n\n  // Returns the controller state for a given gesture\n  protected get state(): GestureState<T> {\n    return this.controller.state[this.stateKey]\n  }\n\n  // Returns the gesture handler\n  protected get handler() {\n    return this.controller.handlers[this.stateKey]!\n  }\n\n  // Conveninence method to update the shared state\n  protected updateSharedState(sharedState: Partial<SharedGestureState> | null) {\n    Object.assign(this.controller.state.shared, sharedState)\n  }\n\n  // Conveninence method to update the gesture state\n  protected updateGestureState(gestureState: PartialGestureState<T> | null) {\n    Object.assign(this.state, gestureState)\n  }\n\n  // Convenience method to set a timeout for a given gesture\n  protected setTimeout = (callback: (...args: any[]) => void, ms: number = 140, ...args: any[]): void => {\n    this.controller.timeouts[this.stateKey] = window.setTimeout(callback, ms, ...args)\n  }\n\n  // Convenience method to clear a timeout for a given gesture\n  protected clearTimeout = () => {\n    clearTimeout(this.controller.timeouts[this.stateKey])\n  }\n\n  // Convenience method to add window listeners for a given gesture\n  protected addWindowListeners = (listeners: [string, Fn][]) => {\n    this.controller.addWindowListeners(this.stateKey, listeners)\n  }\n\n  // Convenience method to remove window listeners for a given gesture\n  protected removeWindowListeners = () => {\n    this.controller.removeWindowListeners(this.stateKey)\n  }\n\n  /**\n   * Utility function to get kinematics of the gesture.\n   *\n   * @abstract\n   * @values - values we want to calculate the kinematics from\n   * @event - the pointer event\n   * @returns - set of values including movement, velocity, velocities, distance and direction\n   */\n  protected abstract getKinematics(values: Vector2, event: UseGestureEvent): PartialGestureState<T>\n\n  protected abstract mapStateValues(state: GestureState<T>): PartialGestureState<T>\n\n  // Should return the bindings to be added for a given gesture\n  public abstract addBindings(): void\n\n  /**\n   * Returns a generic, common payload for all gestures from an event.\n   *\n   * @param {UseGestureEvent} event\n   * @param {boolean} [isStartEvent]\n   * @returns - the generic gesture payload\n   */\n  protected getGenericPayload(event: UseGestureEvent, isStartEvent?: boolean) {\n    const { timeStamp, type } = event\n    const { values, startTime } = this.state\n\n    return {\n      _lastEventType: type,\n      event,\n      timeStamp,\n      elapsedTime: isStartEvent ? 0 : timeStamp - startTime!,\n      args: this.args,\n      previous: values,\n    }\n  }\n  /**\n   * Returns the reinitialized start state for the gesture.\n   * Should be common to all gestures.\n   *\n   * @param {Vector2} values\n   * @param {UseGestureEvent} event\n   * @returns - the start state for the gesture\n   */\n  protected getStartGestureState = (values: Vector2, event: UseGestureEvent) => {\n    return {\n      ...getInitialState()[this.stateKey],\n      _active: true,\n      values,\n      initial: values,\n      offset: this.state.offset,\n      lastOffset: this.state.offset,\n      startTime: event.timeStamp,\n    }\n  }\n\n  /**\n   * Returns state properties depending on the movement and state.\n   *\n   * Should be overriden for custom behavior, doesn't do anything in the implementation\n   * below.\n   */\n  protected checkIntentionality(\n    _intentional: [FalseOrNumber, FalseOrNumber],\n    _movement: Vector2,\n    _state: PartialGestureState<T>\n  ): PartialGestureState<T> {\n    return { _intentional, _blocked: false } as PartialGestureState<T>\n  }\n\n  protected abstract getInternalMovement(values: Vector2, state: GestureState<T>): Vector2\n\n  /**\n   * Returns basic movement properties for the gesture based on the next values and current state.\n   */\n  protected getMovement(values: Vector2, state: GestureState<T> = this.state): PartialGestureState<T> {\n    const { initial, threshold, rubberband } = this.config\n\n    const [t0, t1] = threshold\n\n    const { _initial, _active, _intentional: intentional, lastOffset, movement: prevMovement } = state\n    let [i0, i1] = intentional\n\n    const [_m0, _m1] = this.getInternalMovement(values, state)\n\n    /**\n     * For both dimensions of the gesture, check its intentionality on each frame.\n     */\n    if (i0 === false) {\n      i0 = getIntentionalDisplacement(_m0, t0)\n    }\n    if (i1 === false) {\n      i1 = getIntentionalDisplacement(_m1, t1)\n    }\n\n    // Get gesture specific state properties based on intentionality and movement.\n    const intentionalityCheck = this.checkIntentionality([i0, i1], [_m0, _m1], state)\n\n    const { _intentional, _blocked } = intentionalityCheck\n    const [_i0, _i1] = _intentional!\n    const _movement = [_m0, _m1]\n\n    if (_i0 !== false && intentional[0] === false) _initial[0] = valueFn(initial)[0]\n    if (_i1 !== false && intentional[1] === false) _initial[1] = valueFn(initial)[1]\n\n    /**\n     * If the gesture has been blocked (from gesture specific checkIntentionality),\n     * stop right there.\n     */\n    if (_blocked) return { ...intentionalityCheck, _movement, delta: [0, 0] }\n\n    /**\n     * The movement sent to the handler has 0 in its dimensions when intentionality is false.\n     * It is calculated from the actual movement minus the threshold.\n     */\n    let movement = [\n      _i0 !== false ? _m0 - _i0 : valueFn(initial)[0],\n      _i1 !== false ? _m1 - _i1 : valueFn(initial)[1],\n    ] as Vector2\n    const offset = addV(movement, lastOffset)\n\n    /**\n     * Rubberband should be 0 when the gesture is no longer active, so that movement\n     * and offset can return within their bounds.\n     */\n    const _rubberband: Vector2 = _active ? rubberband : [0, 0]\n    movement = this.rubberband(addV(movement, _initial), _rubberband) // rubberbanded movement\n\n    return {\n      ...intentionalityCheck,\n      _initial,\n      _movement,\n      movement,\n      offset: this.rubberband(offset, _rubberband), // rubberbanded offset\n      delta: subV(movement, prevMovement),\n    } as PartialGestureState<T>\n  }\n\n  // Runs rubberband on a vector\n  protected rubberband = (vector: Vector2, rubberband: Vector2): Vector2 => {\n    const { bounds } = this.config\n\n    /**\n     * [x, y]: [rubberband(x, min, max), rubberband(y, min, max)]\n     */\n    return vector.map((v, i) => rubberbandIfOutOfBounds(v, bounds[i][0], bounds[i][1], rubberband[i])) as Vector2\n  }\n\n  // Cleans the gesture. Can be overriden by gestures.\n  protected clean() {\n    this.clearTimeout()\n    this.removeWindowListeners()\n  }\n\n  /**\n   * Fires the gesture handler\n   *\n   * @param {boolean} [forceFlag] - if true, then the handler will fire even if the gesture is not intentional\n   */\n  protected fireGestureHandler = (forceFlag?: boolean): FullGestureState<T> | null => {\n    /**\n     * If the gesture has been blocked (this can happen when the gesture has started in an unwanted direction),\n     * clean everything and don't do anything.\n     */\n    if (this.state._blocked) {\n      // we need debounced gestures to end by themselves\n      if (!this.debounced) {\n        this.state._active = false\n        this.clean()\n      }\n      return null\n    }\n\n    // If the gesture has no intentional dimension, don't do fire the handler.\n    const [intentionalX, intentionalY] = this.state._intentional\n    if (!forceFlag && intentionalX === false && intentionalY === false) return null\n\n    const { _active, active } = this.state\n\n    this.state.active = _active\n    this.state.first = _active && !active // `first` is true when the gesture becomes active\n    this.state.last = active && !_active // `last` is true when the gesture becomes inactive\n\n    this.controller.state.shared[this.ingKey] = _active // Sets dragging, pinching, etc. to the gesture active state\n\n    const state = {\n      ...this.controller.state.shared,\n      ...this.state,\n      ...this.mapStateValues(this.state), // Sets xy or da to the gesture state values\n    } as FullGestureState<T>\n\n    // @ts-ignore\n    const newMemo = this.handler(state)\n\n    // Sets memo to the returned value of the handler (unless it's not undefined)\n    this.state.memo = newMemo !== void 0 ? newMemo : this.state.memo\n\n    // Cleans the gesture when the gesture is no longer active.\n    if (!_active) this.clean()\n\n    return state\n  }\n}\n","import Recognizer from './Recognizer'\nimport { calculateAllKinematics, subV } from '../utils/math'\nimport { Vector2, UseGestureEvent, PartialGestureState, FalseOrNumber, GestureState, CoordinatesKey } from '../types'\n\n/**\n * @private\n * Abstract class for coordinates-based gesture recongizers\n * @abstract\n * @class CoordinatesRecognizer\n * @extends {Recognizer<T>}\n * @template T\n */\nexport default abstract class CoordinatesRecognizer<T extends CoordinatesKey> extends Recognizer<T> {\n  /**\n   * Returns the real movement (without taking intentionality into acount)\n   */\n  protected getInternalMovement(values: Vector2, state: GestureState<T>): Vector2 {\n    return subV(values, state.initial)\n  }\n\n  /**\n   * In coordinates-based gesture, this function will detect the first intentional axis,\n   * lock the gesture axis if lockDirection is specified in the config, block the gesture\n   * if the first intentional axis doesn't match the specified axis in config.\n   *\n   * @param {[FalseOrNumber, FalseOrNumber]} _intentional\n   * @param {Vector2} _movement\n   * @param {PartialGestureState<T>} state\n   */\n  protected checkIntentionality(\n    _intentional: [FalseOrNumber, FalseOrNumber],\n    _movement: Vector2,\n    state: PartialGestureState<T>\n  ): PartialGestureState<T> {\n    let [_ix, _iy] = _intentional\n    const intentionalMovement = _ix !== false || _iy !== false\n    let { axis } = state\n    let _blocked = false\n\n    // If the movement is intentional, we can compute axis.\n    if (intentionalMovement) {\n      const [absX, absY] = _movement.map(Math.abs)\n\n      const { axis: configAxis, lockDirection } = this.config\n\n      // We make sure we only set axis value if it hadn't been detected before.\n      axis = axis || (absX > absY ? 'x' : absX < absY ? 'y' : undefined)\n      if (!!configAxis || lockDirection) {\n        if (!!axis) {\n          // If the detected axis doesn't match the config axis we block the gesture\n          if (!!configAxis && axis !== configAxis) _blocked = true\n          else {\n            // Otherwise we prevent the gesture from updating the unwanted axis.\n            const lockedIndex = axis === 'x' ? 1 : 0\n            _intentional![lockedIndex] = false\n          }\n        } else {\n          // Until we've detected the axis, we prevent the hnadler from updating.\n          _intentional = [false, false]\n        }\n      }\n    }\n\n    return { _intentional, _blocked, axis } as PartialGestureState<T>\n  }\n\n  getKinematics(values: Vector2, event: UseGestureEvent): PartialGestureState<T> {\n    const { timeStamp } = this.state\n\n    const movementDetection = this.getMovement(values, this.state)\n    const { _blocked, delta, movement } = movementDetection\n\n    if (_blocked) return movementDetection\n\n    const delta_t = event.timeStamp - timeStamp!\n    const kinematics = calculateAllKinematics(movement!, delta!, delta_t)\n\n    return {\n      values,\n      delta,\n      ...movementDetection,\n      ...kinematics,\n    }\n  }\n\n  protected mapStateValues(state: GestureState<T>): PartialGestureState<T> {\n    return { xy: state.values, vxvy: state.velocities } as PartialGestureState<T>\n  }\n}\n","import { PointerEvent } from 'react'\nimport CoordinatesRecognizer from './CoordinatesRecognizer'\nimport Controller from '../Controller'\nimport { UseGestureEvent, Fn, IngKey } from '../types'\nimport { noop } from '../utils/utils'\nimport { getPointerEventValues, getGenericEventData } from '../utils/event'\nimport { calculateDistance } from '../utils/math'\n\nconst TAP_DISTANCE_THRESHOLD = 3\nconst SWIPE_MAX_ELAPSED_TIME = 220\nconst FILTER_REPEATED_EVENTS_DELAY = 200\n\nexport default class DragRecognizer extends CoordinatesRecognizer<'drag'> {\n  ingKey = 'dragging' as IngKey\n  wasTouch = false\n\n  constructor(controller: Controller, args: any[]) {\n    super('drag', controller, args)\n  }\n\n  private isEventTypeTouch = (type?: string) => !!type && type.indexOf('touch') === 0\n\n  private dragShouldStart = (event: UseGestureEvent) => {\n    const { touches } = getGenericEventData(event)\n    const { _lastEventType } = this.state\n    /**\n     * This tries to filter out mouse events triggered by touch screens\n     * */\n    // If the previous gesture was touch-based, and the current one is mouse based,\n    // this means that we might be dealing with mouse simulated events if they're close to\n    // each other. We're only doing this check when we're not using pointer events.\n    if (\n      !this.controller.config.pointer &&\n      this.isEventTypeTouch(_lastEventType) &&\n      !this.isEventTypeTouch(event.type)\n    ) {\n      const delay = Math.abs(event.timeStamp - this.state.startTime)\n      if (delay < FILTER_REPEATED_EVENTS_DELAY) return false\n    }\n\n    return this.enabled && touches < 2\n  }\n\n  private setPointers = (event: UseGestureEvent<PointerEvent>) => {\n    const { currentTarget, pointerId } = event\n    if (currentTarget) currentTarget.setPointerCapture(pointerId)\n    this.updateGestureState({ currentTarget, pointerId })\n  }\n\n  private removePointers = () => {\n    const { currentTarget, pointerId } = this.state\n    if (currentTarget && pointerId) currentTarget.releasePointerCapture(pointerId)\n  }\n\n  private setListeners = (isTouch: boolean) => {\n    this.removeWindowListeners()\n    const dragListeners: [string, Fn][] = isTouch\n      ? [\n          ['touchmove', this.onDragChange],\n          ['touchend', this.onDragEnd],\n          ['touchcancel', this.onDragEnd],\n        ]\n      : [\n          ['mousemove', this.onDragChange],\n          ['mouseup', this.onDragEnd],\n        ]\n    this.addWindowListeners(dragListeners)\n  }\n\n  onDragStart = (event: UseGestureEvent): void => {\n    if (!this.dragShouldStart(event)) return\n    // if pointers events\n    if (this.controller.config.pointer) this.setPointers(event as PointerEvent)\n    else this.setListeners(this.isEventTypeTouch(event.type))\n\n    if (this.config.delay > 0) {\n      this.state._delayedEvent = true\n      if (typeof event.persist === 'function') event.persist()\n      this.setTimeout(() => this.startDrag(event), this.config.delay)\n    } else {\n      this.startDrag(event)\n    }\n  }\n\n  startDrag(event: UseGestureEvent) {\n    const { values } = getPointerEventValues(event)\n    this.updateSharedState(getGenericEventData(event))\n\n    const startState = {\n      ...this.getStartGestureState(values, event),\n      ...this.getGenericPayload(event, true),\n    }\n\n    this.updateGestureState({\n      ...startState,\n      ...this.getMovement(values, startState),\n      cancel: () => this.onCancel(),\n    })\n\n    this.fireGestureHandler()\n  }\n\n  onDragChange = (event: UseGestureEvent): void => {\n    const { canceled } = this.state\n    if (canceled) return\n\n    if (!this.state._active) {\n      if (this.state._delayedEvent) {\n        this.clearTimeout()\n        this.startDrag(event)\n      }\n      return\n    }\n\n    const genericEventData = getGenericEventData(event)\n\n    if (!genericEventData.down) {\n      this.onDragEnd(event)\n      return\n    }\n\n    this.updateSharedState(genericEventData)\n\n    const { values } = getPointerEventValues(event)\n    const kinematics = this.getKinematics(values, event)\n\n    let { _isTap } = this.state\n    if (_isTap && calculateDistance(kinematics._movement!) >= TAP_DISTANCE_THRESHOLD) _isTap = false\n\n    this.updateGestureState({\n      ...this.getGenericPayload(event),\n      ...kinematics,\n      _isTap,\n      cancel: () => this.onCancel(),\n    })\n\n    this.fireGestureHandler()\n  }\n\n  onDragEnd = (event: UseGestureEvent): void => {\n    this.state._active = false\n    this.updateSharedState({ down: false, buttons: 0, touches: 0 })\n\n    const {\n      _isTap,\n      values,\n      velocities: [vx, vy],\n      movement: [mx, my],\n      _intentional: [ix, iy],\n    } = this.state\n\n    const endState = {\n      ...this.getGenericPayload(event),\n      ...this.getMovement(values),\n    }\n\n    const { elapsedTime } = endState\n\n    const {\n      swipeVelocity: [svx, svy],\n      swipeDistance: [sx, sy],\n    } = this.config\n\n    const swipe: [number, number] = [0, 0]\n\n    if (elapsedTime < SWIPE_MAX_ELAPSED_TIME) {\n      if (ix !== false && Math.abs(vx) > svx && Math.abs(mx) > sx) swipe[0] = Math.sign(vx)\n      if (iy !== false && Math.abs(vy) > svy && Math.abs(my) > sy) swipe[1] = Math.sign(vy)\n    }\n\n    this.updateGestureState({\n      event,\n      ...endState,\n      tap: _isTap,\n      swipe,\n    })\n    this.fireGestureHandler(this.config.filterTaps && this.state._isTap)\n  }\n\n  clean = (): void => {\n    super.clean()\n    this.state._delayedEvent = false\n\n    if (this.controller.config.pointer) this.removePointers()\n  }\n\n  onCancel = (): void => {\n    this.updateGestureState({ canceled: true, cancel: noop })\n    this.state._active = false\n    this.updateSharedState({ down: false, buttons: 0, touches: 0 })\n    requestAnimationFrame(() => this.fireGestureHandler())\n  }\n\n  addBindings(): void {\n    if (this.controller.config.pointer) {\n      this.controller.addBindings('onPointerDown', this.onDragStart)\n      this.controller.addBindings('onPointerMove', this.onDragChange)\n      this.controller.addBindings(['onPointerUp', 'onPointerCancel'], this.onDragEnd)\n    } else {\n      this.controller.addBindings(['onTouchStart', 'onMouseDown'], this.onDragStart)\n    }\n  }\n}\n","import { def, matchKeysFromObject } from './utils'\nimport {\n  Vector2,\n  GenericOptions,\n  InternalGenericOptions,\n  DragConfig,\n  Tuple,\n  GestureOptions,\n  InternalDragOptions,\n  InternalGestureOptions,\n  CoordinatesConfig,\n  CoordinatesOptions,\n  InternalCoordinatesOptions,\n  DistanceAngleConfig,\n  InternalDistanceAngleOptions,\n} from '../types'\n\nconst DEFAULT_DRAG_DELAY = 180\nconst DEFAULT_RUBBERBAND = 0.15\nconst DEFAULT_SWIPE_VELOCITY = 0.5\nconst DEFAULT_SWIPE_DISTANCE = 60\n\nconst defaultWindow = typeof window !== 'undefined' ? window : undefined\n\nconst defaultCoordinatesOptions: CoordinatesOptions = {\n  lockDirection: false,\n  axis: undefined,\n  bounds: undefined,\n}\n\n/**\n * @private\n *\n * Returns the internal generic option object.\n *\n * @param {Partial<GenericOptions>} [config={}]\n * @returns {InternalGenericOptions}\n */\nexport function getInternalGenericOptions(config: Partial<GenericOptions> = {}): InternalGenericOptions {\n  let {\n    eventOptions: { passive = true, capture = false, pointer = false } = {},\n    window = defaultWindow,\n    domTarget = undefined,\n    enabled = true,\n    ...restConfig\n  } = config\n\n  return {\n    ...restConfig,\n    enabled,\n    domTarget,\n    window,\n    // passive is always true if there's no domTarget\n    eventOptions: { passive: !domTarget || !!passive, capture: !!capture },\n    captureString: capture ? 'Capture' : '',\n    pointer: !!pointer,\n  }\n}\n\nexport function getInternalGestureOptions(gestureConfig: Partial<GestureOptions>): InternalGestureOptions {\n  let { threshold = undefined, rubberband = 0, enabled = true, initial = [0, 0] } = gestureConfig\n\n  if (typeof rubberband === 'boolean') rubberband = rubberband ? DEFAULT_RUBBERBAND : 0\n  if (threshold === void 0) threshold = 0\n\n  return {\n    enabled,\n    initial,\n    threshold: def.array(threshold) as Vector2,\n    rubberband: def.array(rubberband) as Vector2,\n  }\n}\n\nexport function getInternalCoordinatesOptions(coordinatesConfig: CoordinatesConfig = {}): InternalCoordinatesOptions {\n  const { axis, lockDirection, bounds = {}, ...internalOptions } = coordinatesConfig\n\n  const boundsArray = [\n    [def.withDefault(bounds.left, -Infinity), def.withDefault(bounds.right, Infinity)],\n    [def.withDefault(bounds.top, -Infinity), def.withDefault(bounds.bottom, Infinity)],\n  ]\n\n  return {\n    ...getInternalGestureOptions(internalOptions),\n    ...defaultCoordinatesOptions,\n    ...matchKeysFromObject({ axis, lockDirection }, coordinatesConfig),\n    bounds: boundsArray as Tuple<Vector2>,\n  }\n}\n\nexport function getInternalDistanceAngleOptions(\n  distanceAngleConfig: DistanceAngleConfig = {}\n): InternalDistanceAngleOptions {\n  const { distanceBounds = {}, angleBounds = {}, ...internalOptions } = distanceAngleConfig\n\n  const boundsArray = [\n    [def.withDefault(distanceBounds.min, -Infinity), def.withDefault(distanceBounds.max, Infinity)],\n    [def.withDefault(angleBounds.min, -Infinity), def.withDefault(angleBounds.max, Infinity)],\n  ]\n\n  return {\n    ...getInternalGestureOptions(internalOptions),\n    bounds: boundsArray as Tuple<Vector2>,\n  }\n}\n\nexport function getInternalDragOptions(dragConfig: DragConfig = {}): InternalDragOptions {\n  let { enabled, threshold, bounds, rubberband, initial, ...dragOptions } = dragConfig\n  let {\n    swipeVelocity = DEFAULT_SWIPE_VELOCITY,\n    swipeDistance = DEFAULT_SWIPE_DISTANCE,\n    delay = false,\n    filterTaps = false,\n    axis,\n    lockDirection,\n  } = dragOptions\n\n  if (threshold === void 0) {\n    threshold = Math.max(0, filterTaps ? 3 : 0, lockDirection || axis ? 1 : 0)\n  } else {\n    filterTaps = true\n  }\n\n  const internalCoordinatesOptions = getInternalCoordinatesOptions(\n    matchKeysFromObject({ enabled, threshold, bounds, rubberband, axis, lockDirection, initial }, dragConfig)\n  )\n\n  return {\n    ...internalCoordinatesOptions,\n    filterTaps: filterTaps || internalCoordinatesOptions.threshold[0] + internalCoordinatesOptions.threshold[1] > 0,\n    swipeVelocity: def.array(swipeVelocity) as Vector2,\n    swipeDistance: def.array(swipeDistance) as Vector2,\n    delay: typeof delay === 'number' ? delay : delay ? DEFAULT_DRAG_DELAY : 0,\n  }\n}\n","import useRecognizers from './useRecognizers'\nimport DragRecognizer from '../recognizers/DragRecognizer'\nimport { Handler, InternalConfig, HookReturnType, UseDragConfig } from '../types'\nimport { getInternalGenericOptions, getInternalDragOptions } from '../utils/config'\n\n/**\n * @public\n *\n * Drag hook.\n *\n * @param {Handler<'drag'>} handler - the function fired every time the drag gesture updates\n * @param {(Config | {})} [config={}] - the config object including generic options and drag options\n * @returns {(...args: any[]) => HookReturnType<Config>}\n */\nexport function useDrag<Config extends UseDragConfig>(\n  handler: Handler<'drag'>,\n  config: Config | {} = {}\n): (...args: any[]) => HookReturnType<Config> {\n  const { domTarget, eventOptions, window, ...drag } = config as UseDragConfig\n\n  /**\n   * TODO: at the moment we recompute the config object at every render\n   * this could probably be optimized\n   */\n  const mergedConfig: InternalConfig = {\n    ...getInternalGenericOptions({\n      domTarget,\n      eventOptions,\n      window,\n    }),\n    drag: getInternalDragOptions(drag),\n  }\n\n  return useRecognizers<Config>({ drag: handler }, [DragRecognizer], mergedConfig)\n}\n","/* eslint-disable */\nimport { useEffect } from 'react';\nimport { isClient } from './util';\nvar defaultTarget = isClient ? window : null;\nvar isListenerType1 = function (target) {\n    return !!target.addEventListener;\n};\nvar isListenerType2 = function (target) {\n    return !!target.on;\n};\nvar useEvent = function (name, handler, target, options) {\n    if (target === void 0) { target = defaultTarget; }\n    useEffect(function () {\n        if (!handler) {\n            return;\n        }\n        if (!target) {\n            return;\n        }\n        if (isListenerType1(target)) {\n            target.addEventListener(name, handler, options);\n        }\n        else if (isListenerType2(target)) {\n            target.on(name, handler, options);\n        }\n        return function () {\n            if (isListenerType1(target)) {\n                target.removeEventListener(name, handler, options);\n            }\n            else if (isListenerType2(target)) {\n                target.off(name, handler, options);\n            }\n        };\n    }, [name, handler, target, JSON.stringify(options)]);\n};\nexport default useEvent;\n","/* eslint-disable */\nimport { useMemo } from 'react';\nimport useEvent from './useEvent';\nvar noop = function () { };\nvar createKeyPredicate = function (keyFilter) {\n    return typeof keyFilter === 'function'\n        ? keyFilter\n        : typeof keyFilter === 'string'\n            ? function (event) { return event.key === keyFilter; }\n            : keyFilter\n                ? function () { return true; }\n                : function () { return false; };\n};\nvar useKey = function (key, fn, opts, deps) {\n    if (fn === void 0) { fn = noop; }\n    if (opts === void 0) { opts = {}; }\n    if (deps === void 0) { deps = [key]; }\n    var _a = opts.event, event = _a === void 0 ? 'keydown' : _a, target = opts.target, options = opts.options;\n    var useMemoHandler = useMemo(function () {\n        var predicate = createKeyPredicate(key);\n        var handler = function (handlerEvent) {\n            if (predicate(handlerEvent)) {\n                return fn(handlerEvent);\n            }\n        };\n        return handler;\n    }, deps);\n    useEvent(event, useMemoHandler, target, options);\n};\nexport default useKey;\n","import { useState } from 'react';\nimport useKey from './useKey';\nvar useKeyPress = function (keyFilter) {\n    var _a = useState([false, null]), state = _a[0], set = _a[1];\n    useKey(keyFilter, function (event) { return set([true, event]); }, { event: 'keydown' }, [state]);\n    useKey(keyFilter, function (event) { return set([false, event]); }, { event: 'keyup' }, [state]);\n    return state;\n};\nexport default useKeyPress;\n","import useKeyPressDefault from './useKeyPress';\nimport useUpdateEffect from './useUpdateEffect';\nvar useKeyPressEvent = function (key, keydown, keyup, useKeyPress) {\n    if (useKeyPress === void 0) { useKeyPress = useKeyPressDefault; }\n    var _a = useKeyPress(key), pressed = _a[0], event = _a[1];\n    useUpdateEffect(function () {\n        if (!pressed && keyup) {\n            keyup(event);\n        }\n        else if (pressed && keydown) {\n            keydown(event);\n        }\n    }, [pressed]);\n};\nexport default useKeyPressEvent;\n"],"sourceRoot":""}