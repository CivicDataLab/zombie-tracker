{"version":3,"sources":["components/Minigraphs.js"],"names":["margin","React","memo","timeseries","timelineDate","date","refs","useRef","dates","useMemo","today","getIndiaYesterdayISO","pastDates","Object","keys","filter","cutOffDate","formatISO","subDays","parseIndiaDate","MINIGRAPH_LOOKBACK_DAYS","representation","useEffect","T","length","chartRight","chartBottom","xScale","scaleTime","clamp","domain","range","current","forEach","ref","index","pathLength","svg","select","statistic","PRIMARY_STATISTICS","color","STATISTIC_CONFIGS","dailyMaxAbs","max","Math","abs","getStatistic","yScale","scaleLinear","linePath","line","curve","curveMonotoneX","x","y","selectAll","data","join","enter","append","attr","this","getTotalLength","call","transition","delay","duration","update","attrTween","previous","interpolatePath","style","className","map","key","classnames","el","width","height","viewBox","preserveAspectRatio","prevProps","currProps","forceRender","equal","stateCode"],"mappings":"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","file":"static/js/36.5a7f3c24.chunk.js","sourcesContent":["import {\n  MINIGRAPH_LOOKBACK_DAYS,\n  PRIMARY_STATISTICS,\n  STATISTIC_CONFIGS,\n} from '../constants';\nimport {\n  getStatistic,\n  getIndiaYesterdayISO,\n  parseIndiaDate,\n} from '../utils/commonFunctions';\n\nimport classnames from 'classnames';\nimport {max} from 'd3-array';\nimport {interpolatePath} from 'd3-interpolate-path';\nimport {scaleTime, scaleLinear} from 'd3-scale';\nimport {select} from 'd3-selection';\nimport {line, curveMonotoneX} from 'd3-shape';\n// eslint-disable-next-line\nimport {transition} from 'd3-transition';\nimport {formatISO, subDays} from 'date-fns';\nimport equal from 'fast-deep-equal';\nimport React, {useEffect, useRef, useMemo} from 'react';\n\n// Dimensions\nconst [width, height] = [100, 75];\nconst margin = {top: 10, right: 10, bottom: 2, left: 5};\n\nfunction Minigraphs({timeseries, date: timelineDate}) {\n  const refs = useRef([]);\n\n  const dates = useMemo(() => {\n    const today = timelineDate || getIndiaYesterdayISO();\n    const pastDates = Object.keys(timeseries || {}).filter(\n      (date) => date <= today\n    );\n    const cutOffDate = formatISO(\n      subDays(parseIndiaDate(today), MINIGRAPH_LOOKBACK_DAYS),\n      {representation: 'date'}\n    );\n    return pastDates.filter((date) => date >= cutOffDate);\n  }, [timeseries, timelineDate]);\n\n  useEffect(() => {\n    const T = dates.length;\n\n    const chartRight = width - margin.right;\n    const chartBottom = height - margin.bottom;\n\n    const xScale = scaleTime()\n      .clamp(true)\n      .domain(T ? [parseIndiaDate(dates[0]), parseIndiaDate(dates[T - 1])] : [])\n      .range([margin.left, chartRight]);\n\n    refs.current.forEach((ref, index) => {\n      const svg = select(ref);\n      const statistic = PRIMARY_STATISTICS[index];\n      const color = STATISTIC_CONFIGS[statistic].color;\n\n      const dailyMaxAbs = max(dates, (date) =>\n        Math.abs(getStatistic(timeseries[date], 'delta', statistic))\n      );\n\n      const yScale = scaleLinear()\n        .clamp(true)\n        .domain([-dailyMaxAbs, dailyMaxAbs])\n        .range([chartBottom, margin.top]);\n\n      const linePath = line()\n        .curve(curveMonotoneX)\n        .x((date) => xScale(parseIndiaDate(date)))\n        .y((date) =>\n          yScale(getStatistic(timeseries[date], 'delta', statistic))\n        );\n\n      let pathLength;\n      svg\n        .selectAll('path')\n        .data(T ? [dates] : [])\n        .join(\n          (enter) =>\n            enter\n              .append('path')\n              .attr('fill', 'none')\n              .attr('stroke', color + '99')\n              .attr('stroke-width', 2.5)\n              .attr('d', linePath)\n              .attr('stroke-dasharray', function () {\n                return (pathLength = this.getTotalLength());\n              })\n              .call((enter) =>\n                enter\n                  .attr('stroke-dashoffset', pathLength)\n                  .transition()\n                  .delay(100)\n                  .duration(2500)\n                  .attr('stroke-dashoffset', 0)\n              ),\n          (update) =>\n            update\n              .attr('stroke-dasharray', null)\n              .transition()\n              .duration(500)\n              .attrTween('d', function (date) {\n                const previous = select(this).attr('d');\n                const current = linePath(date);\n                return interpolatePath(previous, current);\n              })\n        );\n\n      svg\n        .selectAll('circle')\n        .data(T ? [dates[T - 1]] : [])\n        .join(\n          (enter) =>\n            enter\n              .append('circle')\n              .attr('fill', color)\n              .attr('r', 2.5)\n              .attr('cx', (date) => xScale(parseIndiaDate(date)))\n              .attr('cy', (date) =>\n                yScale(getStatistic(timeseries[date], 'delta', statistic))\n              )\n              .style('opacity', 0)\n              .call((enter) =>\n                enter\n                  .transition()\n                  .delay(2100)\n                  .duration(500)\n                  .style('opacity', 1)\n                  .attr('cx', (date) => xScale(parseIndiaDate(date)))\n                  .attr('cy', (date) =>\n                    yScale(getStatistic(timeseries[date], 'delta', statistic))\n                  )\n              ),\n          (update) =>\n            update\n              .transition()\n              .duration(500)\n              .attr('cx', (date) => xScale(parseIndiaDate(date)))\n              .attr('cy', (date) =>\n                yScale(getStatistic(timeseries[date], 'delta', statistic))\n              )\n        );\n    });\n  }, [dates, timeseries]);\n\n  return (\n    <div className=\"Minigraph\">\n      {PRIMARY_STATISTICS.map((statistic, index) => (\n        <div key={statistic} className={classnames('svg-parent')}>\n          <svg\n            ref={(el) => {\n              refs.current[index] = el;\n            }}\n            width={width}\n            height={height}\n            viewBox={`0 0 ${width} ${height}`}\n            preserveAspectRatio=\"xMidYMid meet\"\n          />\n        </div>\n      ))}\n    </div>\n  );\n}\n\nconst isEqual = (prevProps, currProps) => {\n  if (currProps.forceRender) {\n    return false;\n  } else if (!currProps.timeseries && prevProps.timeseries) {\n    return true;\n  } else if (currProps.timeseries && !prevProps.timeseries) {\n    return false;\n  } else if (!equal(currProps.stateCode, prevProps.stateCode)) {\n    return false;\n  } else if (!equal(currProps.date, prevProps.date)) {\n    return false;\n  }\n  return true;\n};\n\nexport default React.memo(Minigraphs, isEqual);\n"],"sourceRoot":""}