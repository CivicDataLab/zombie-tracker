{"version":3,"sources":["hooks/useResizeObserver.js","components/TrendPendency.js"],"names":["useResizeObserver","ref","useState","dimensions","setDimensions","useEffect","observeTarget","current","resizeObserver","ResizeObserver","entries","observer","forEach","entry","index","contentRect","observe","unobserve","margin","React","memo","timeseries","pendency_years","chartType","t","useTranslation","refs","useRef","dates","wrapperRef","highlightedDate","setHighlightedDate","length","getBarWidth","useCallback","T","axisWidth","getBoundingClientRect","width","Math","min","height","chartRight","chartBottom","barWidth","xScale","scaleBand","domain","range","padding","xAxis","g","attr","call","axisBottom","ticks","tickFormat","date","xAxis2","yScale","tickValues","tickSize","select","style","yAxis","axisRight","tickPadding","mousemove","xm","mouse","this","invert","mouseout","x","scaleQuantize","scale","i","svg","transition","duration","D3_TRANSITION_DURATION","statistic","PENDENCY_STATISTICS","scaleLinear","clamp","max","nice","color","STATISTIC_CONFIGS","selectAll","remove","data","join","enter","append","on","getStatisticDelta","deltaToday","getStatistic","yesterday","formatISO","subDays","parseIndiaDate","representation","trail","useMemo","styles","map","element","push","animationDelay","Fragment","className","statisticConfig","key","classnames","marginRight","capitalize","ts_displayName","formatNumber","format","preserveAspectRatio","prevProps","currProps","equal","regionHighlighted","stateCode","districtName"],"mappings":"6KAGaA,EAAoB,SAACC,GAAS,IAAD,EACJC,mBAAS,MADL,mBACjCC,EADiC,KACrBC,EADqB,KAcxC,OAZAC,qBAAU,WACR,IAAMC,EAAgBL,EAAIM,QACpBC,EAAiB,IAAIC,KAAe,SAACC,EAASC,GAClDD,EAAQE,SAAQ,SAACC,EAAOC,GACtBV,EAAcS,EAAME,mBAIxB,OADAP,EAAeQ,QAAQV,GAChB,WACLE,EAAeS,UAAUX,MAE1B,CAACL,IACGE,I,kPCaHe,EAAe,GAAfA,EAA0B,GAA1BA,EAAsC,GAAtCA,EAAgD,GA6SvCC,cAAMC,MA3SrB,YAA4D,IAAzCC,EAAwC,EAAxCA,WAAYC,EAA4B,EAA5BA,eAAgBC,EAAY,EAAZA,UACtCC,EAAKC,cAALD,EACDE,EAAOC,iBAAO,IAEdC,EAAQN,EAERO,EAAaF,mBACbxB,EAAaH,YAAkB6B,GAPoB,EASX3B,qBATW,mBASlD4B,EATkD,KASjCC,EATiC,KAWzD1B,qBAAU,WACR0B,EAAmBH,EAAMA,EAAMI,OAAS,MACvC,CAACJ,IAEJ,IAAMK,EAAcC,uBAAY,WAC9B,IAAMC,EAAIP,EAAMI,OAMVI,GAJUjC,GAAc0B,EAAWtB,QAAQ8B,yBAA1CC,MAEoBpB,EAEIA,EAC/B,OAAOqB,KAAKC,IAAI,EAAGJ,GAAa,KAAOD,MACtC,CAACP,EAAMI,OAAQ7B,IAElBE,qBAAU,WACR,IAAM8B,EAAIP,EAAMI,OADF,EAIZ7B,GAAc0B,EAAWtB,QAAQ8B,wBAD5BC,EAHO,EAGPA,MAAOG,EAHA,EAGAA,OAGRC,EAAaJ,EAAQpB,EACrByB,EAAcF,EAASvB,EACvB0B,EAAWX,IAMXY,EAASC,cACZC,OAAOnB,GACPoB,MAAM,CAAC9B,EAAawB,IACpBO,QAAQ,GAKLC,EAAQ,SAACC,GAAD,OACZA,EAAEC,KAAK,QAAS,UAAUC,KACxBC,YAAWT,GACRU,MALyB,GAMzBC,YAAW,SAACC,GAAD,OAAUA,OAKtBC,EAAS,SAACP,EAAGQ,GACjBR,EAAEC,KAAK,QAAS,WACbC,KAAKC,YAAWT,GAAQe,WAAW,IAAIC,SAAS,IAChDC,OAAO,WACPC,MAAM,YAHT,qBAGoCJ,EAAO,GAH3C,QAKIA,EAAO,KAAOhB,EAAaQ,EAAEW,OAAO,WAAWV,KAAK,UAAW,IAC9DD,EAAEW,OAAO,WAAWV,KAAK,UAAW,IAGrCY,EAAQ,SAACb,EAAGQ,GAAJ,OACZR,EACGC,KAAK,QAAS,UACdC,KAAKY,YAAUN,GAAQJ,MAAM,EAAG,OAAOW,YAAY,KASxD,SAASC,IAEP,IAAMC,EAAKC,YAAMC,MAAM,GACjBb,EAAOZ,EAAO0B,OAAOH,GAE3BrC,EAAmB0B,GAGrB,SAASe,IACPzC,EAAmBH,EAAMO,EAAI,IAhB/BU,EAAO0B,OAAS,SAASE,GACxB,IAAI1B,EAASuB,KAAKvB,SACdC,EAAQsB,KAAKtB,QAEjB,OADY0B,cAAgB3B,OAAOC,GAAOA,MAAMD,EACzC4B,CAAMF,IAgBd/C,EAAKnB,QAAQK,SAAQ,SAACX,EAAK2E,GACzB,IAAMC,EAAMf,YAAO7D,GACbuB,EAAIqD,EAAIC,aAAaC,SAASC,KAE9BC,EAAYC,IAAoBN,GAChCjB,EAASwB,cACZC,OAAM,GACNrC,OAAO,CA7DU,IA+DdR,KAAKC,IACH,EACAA,YAAIZ,GAAO,SAAC6B,GAAD,OACTpC,EAAWoC,OAGjBlB,KAAK8C,IACH,EAvEW,IAyETA,YAAIzD,GAAO,SAAC6B,GAAD,OACTpC,EAAWoC,SAIlB6B,KAAK,GACLtC,MAAM,CAACL,EAAazB,IAEjBqE,EAAQC,IAAkBP,GAAWM,MAG3CV,EACGf,OAAO,WACPC,MAAM,YAFT,qBAEoCpB,EAFpC,QAGGmC,WAAWtD,GACX6B,KAAKH,GAER2B,EAAIf,OAAO,YAAYgB,WAAWtD,GAAG6B,KAAKK,EAAQC,GAGlDkB,EACGf,OAAO,WACPC,MAAM,YAFT,qBAEoCrB,EAFpC,QAGGoC,WAAWtD,GACX6B,KAAKW,EAAOL,GAIfkB,EAAIY,UAAU,QAAQC,SACtBb,EACGY,UAAU,QACVE,KAAK/D,GAAO,SAAC6B,GAAD,OAAUA,KACtBmC,MAAK,SAACC,GAAD,OACJA,EACGC,OAAO,QACP1C,KAAK,OAAQmC,GACbnC,KAAK,SAAUmC,GACfnC,KAAK,KAAK,SAACK,GAAD,OAAUE,EAAOtC,EAAWoC,OACtCL,KAAK,KAAK,SAACK,GAAD,OAAUZ,EAAOY,MAC3BL,KAAK,QAASR,EAAW,GACzBQ,KAAK,SAAU,MAEnB0B,WAAWtD,GACX4B,KAAK,UAAU,SAACK,GAAD,OAAUd,EAAcgB,EAAOtC,EAAWoC,OAO5DoB,EAAIY,UAAU,KAAKrC,KAAK,iBAAkB,QAC1CyB,EACGkB,GAAG,YAAa5B,GAChB4B,GAAG,YAAa5B,GAChB4B,GAAG,WAAYvB,GACfuB,GAAG,WAAYvB,QAEnB,CAACjD,EAAWpB,EAAY8B,EAAaZ,EAAYO,IAEpDvB,qBAAU,WACR,IAAMuC,EAAWX,IACjBP,EAAKnB,QAAQK,SAAQ,SAACX,GACR6D,YAAO7D,GAEhBwF,UAAU,QACVrC,KAAK,SAAS,SAACK,GAAD,OACbA,IAAS3B,EAAkBc,EAAWA,EAAW,UAGtD,CAACd,EAAiBG,IAErB,IAAM+D,EAAoB9D,uBACxB,SAAC+C,GACC,GAAKnD,EAAL,CACA,IAAMmE,EAAaC,YAAY,OAC7B7E,QAD6B,IAC7BA,OAD6B,EAC7BA,EAAaS,GACb,QACAmD,GAEF,GAAkB,UAAd1D,EAAuB,OAAO0E,EAElC,IAAME,EAAYC,YAAUC,YAAQC,YAAexE,GAAkB,GAAI,CACvEyE,eAAgB,SAOlB,OAAON,EALgBC,YAAY,OACjC7E,QADiC,IACjCA,OADiC,EACjCA,EAAa8E,GACb,QACAlB,MAIJ,CAAC5D,EAAYS,EAAiBP,IAG1BiF,EAAQC,mBAAQ,WACpB,IAAMC,EAAS,GAQf,MANA,CAAC,EAAG,EAAG,EAAG,EAAG,GAAGC,KAAI,SAACC,EAAS9F,GAI5B,OAHA4F,EAAOG,KAAK,CACVC,eAAe,GAAD,OAAa,IAARhG,EAAL,QAET,QAEF4F,IACN,IAEH,OACE,kBAAC,IAAMK,SAAP,KACE,yBAAKC,UAAU,cACZ9B,IAAoByB,KAAI,SAAC1B,EAAWnE,GACrBkF,EAAkBf,EAAWnE,GAA3C,IACMmG,EAAkBzB,IAAkBP,GAC1C,OACE,yBACEiC,IAAKjC,EACL+B,UAAWG,IAAW,sBAAD,aAA8BlC,IACnDhF,IAAK4B,EACLkC,OAAOyC,EAAM1F,GAAQ,CAACsG,YAAY,QAEjCtF,GACC,yBAAKkF,UAAWG,IAAW,QAAD,aAAgBlC,KACxC,wBAAI+B,UAAU,SACXxF,EAAE6F,YAAWJ,EAAgBK,kBAEhC,wBAAIN,UAAU,SACXlF,GAEH,yBAAKkF,UAAU,gBACb,4BACGO,YACGlG,EAAWS,GAEc,UAA3BmF,EAAgBO,OACZP,EAAgBO,OAChB,MACJvC,MAaV,yBACEhF,IAAK,SAAC2G,GACJlF,EAAKnB,QAAQO,GAAS8F,GAExBa,oBAAoB,iBAEpB,uBAAGT,UAAU,WANf,MAOK,uBAAGA,UAAU,YAChB,uBAAGA,UAAU,qBAUb,SAACU,EAAWC,GAC1B,QAAKC,IAAMD,EAAUpG,UAAWmG,EAAUnG,eAGvCqG,IACCD,EAAUE,kBAAkBC,UAC5BJ,EAAUG,kBAAkBC,eAK7BF,IACCD,EAAUE,kBAAkBE,aAC5BL,EAAUG,kBAAkBE,iBAIpBH,IAAMD,EAAU/F,MAAO8F,EAAU9F","file":"static/js/42.9bb357e1.chunk.js","sourcesContent":["import {ResizeObserver} from '@juggle/resize-observer';\nimport {useState, useEffect} from 'react';\n\nexport const useResizeObserver = (ref) => {\n  const [dimensions, setDimensions] = useState(null);\n  useEffect(() => {\n    const observeTarget = ref.current;\n    const resizeObserver = new ResizeObserver((entries, observer) => {\n      entries.forEach((entry, index) => {\n        setDimensions(entry.contentRect);\n      });\n    });\n    resizeObserver.observe(observeTarget);\n    return () => {\n      resizeObserver.unobserve(observeTarget);\n    };\n  }, [ref]);\n  return dimensions;\n};\n\nexport default useResizeObserver;\n","import {\n  D3_TRANSITION_DURATION,\n  STATISTIC_CONFIGS,\n  TIMESERIES_STATISTICS,\n  PENDENCY_STATISTICS,\n} from '../constants';\nimport {useResizeObserver} from '../hooks/useResizeObserver';\nimport {\n  capitalize,\n  formatNumber,\n  formatDate,\n  getStatistic,\n  parseIndiaDate,\n} from '../utils/commonFunctions';\n\nimport classnames from 'classnames';\nimport {min, max, bisector} from 'd3-array';\nimport {axisBottom, axisRight} from 'd3-axis';\nimport {interpolatePath} from 'd3-interpolate-path';\nimport {scaleBand, scaleTime, scaleLinear, scaleQuantize} from 'd3-scale';\nimport {select, mouse, event} from 'd3-selection';\nimport {line, curveMonotoneX} from 'd3-shape';\n// eslint-disable-next-line\nimport {transition} from 'd3-transition';\nimport {formatISO, subDays} from 'date-fns';\nimport equal from 'fast-deep-equal';\nimport React, {useCallback, useEffect, useRef, useMemo, useState} from 'react';\nimport {useTranslation} from 'react-i18next';\n\n// Chart margins\nconst margin = {top: 15, right: 35, bottom: 25, left: 25};\n\nfunction Trendbar({timeseries, pendency_years, chartType}) {\n  const {t} = useTranslation();\n  const refs = useRef([]);\n\n  const dates = pendency_years;\n\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n\n  const [highlightedDate, setHighlightedDate] = useState();\n\n  useEffect(() => {\n    setHighlightedDate(dates[dates.length - 1]);\n  }, [dates]);\n\n  const getBarWidth = useCallback(() => {\n    const T = dates.length;\n    // Dimensions\n    const {width} = dimensions || wrapperRef.current.getBoundingClientRect();\n    // Chart extremes\n    const chartRight = width - margin.right;\n    // Bar widths\n    const axisWidth = chartRight - margin.left;\n    return Math.min(4, axisWidth / (1.25 * T));\n  }, [dates.length, dimensions]);\n\n  useEffect(() => {\n    const T = dates.length;\n    // Dimensions\n    const {width, height} =\n      dimensions || wrapperRef.current.getBoundingClientRect();\n    // Chart extremes\n    const chartRight = width - margin.right;\n    const chartBottom = height - margin.bottom;\n    const barWidth = getBarWidth();\n\n    // Buffer space along y-axis\n    const yBufferTop = 1.2;\n    const yBufferBottom = 1.1;\n\n    const xScale = scaleBand()\n      .domain(dates)\n      .range([margin.left, chartRight])\n      .padding(1);\n\n    // Number of x-axis ticks\n    const numTicksX = width < 480 ? 5 : 5;\n\n    const xAxis = (g) =>\n      g.attr('class', 'x-axis').call(\n        axisBottom(xScale)\n          .ticks(numTicksX)\n          .tickFormat((date) => date)\n      );\n\n    // alert (JSON.stringify(timeseries));\n\n    const xAxis2 = (g, yScale) => {\n      g.attr('class', 'x-axis2')\n        .call(axisBottom(xScale).tickValues([]).tickSize(0))\n        .select('.domain')\n        .style('transform', `translateY(${yScale(0)}px)`);\n\n      if (yScale(0) !== chartBottom) g.select('.domain').attr('opacity', 0.4);\n      else g.select('.domain').attr('opacity', 0);\n    };\n  \n    const yAxis = (g, yScale) =>\n      g\n        .attr('class', 'y-axis')\n        .call(axisRight(yScale).ticks(4, '0~s').tickPadding(4));\n\n    xScale.invert = function(x) {\n\t    var domain = this.domain();\n\t    var range = this.range()\n\t    var scale = scaleQuantize().domain(range).range(domain)\n\t    return scale(x)\n\t};\n\n    function mousemove() {\n\n      const xm = mouse(this)[0];\n      const date = xScale.invert(xm);\n      //alert(date)\n      setHighlightedDate(date);\n    }\n\n    function mouseout() {\n      setHighlightedDate(dates[T - 1]);\n    }\n\n    /* Begin drawing charts */\n    refs.current.forEach((ref, i) => {\n      const svg = select(ref);\n      const t = svg.transition().duration(D3_TRANSITION_DURATION);\n\n      const statistic = PENDENCY_STATISTICS[i];\n      const yScale = scaleLinear()\n        .clamp(true)\n        .domain([\n          yBufferBottom *\n            Math.min(\n              0,\n              min(dates, (date) =>\n                timeseries[date] //getStatistic(timeseries[date], chartType, statistic)\n              )\n            ),\n          Math.max(\n            1,\n            yBufferTop *\n              max(dates, (date) =>\n                timeseries[date] //getStatistic(timeseries[date], chartType, statistic)\n              )\n          ),\n        ])\n        .nice(4)\n        .range([chartBottom, margin.top]);\n\n      const color = STATISTIC_CONFIGS[statistic].color;\n\n      /* X axis */\n      svg\n        .select('.x-axis')\n        .style('transform', `translateY(${chartBottom}px)`)\n        .transition(t)\n        .call(xAxis);\n\n      svg.select('.x-axis2').transition(t).call(xAxis2, yScale);\n\n      /* Y axis */\n      svg\n        .select('.y-axis')\n        .style('transform', `translateX(${chartRight}px)`)\n        .transition(t)\n        .call(yAxis, yScale);\n\n\n      /* Path bars */\n      svg.selectAll('rect').remove();\n      svg\n        .selectAll('rect')\n        .data(dates, (date) => date)\n        .join((enter) =>\n          enter\n            .append('rect')\n            .attr('fill', color)\n            .attr('stroke', color)\n            .attr('y', (date) => yScale(timeseries[date]) )\n            .attr('x', (date) => xScale(date))\n            .attr(\"width\", barWidth / 2)\n            .attr(\"height\", 0)\n        )\n        .transition(t)\n        .attr('height', (date) => chartBottom - yScale(timeseries[date]) \n        );       \n\n\n   \n\n\n      svg.selectAll('*').attr('pointer-events', 'none');\n      svg\n        .on('mousemove', mousemove)\n        .on('touchmove', mousemove)\n        .on('mouseout', mouseout)\n        .on('touchend', mouseout);\n    });\n  }, [chartType, dimensions, getBarWidth, timeseries, dates]);\n\n  useEffect(() => {\n    const barWidth = getBarWidth();\n    refs.current.forEach((ref) => {\n      const svg = select(ref);\n      svg\n        .selectAll('rect')\n        .attr('width', (date) =>\n          date === highlightedDate ? barWidth : barWidth / 2\n        );\n    });\n  }, [highlightedDate, getBarWidth]);\n\n  const getStatisticDelta = useCallback(\n    (statistic) => {\n      if (!highlightedDate) return;\n      const deltaToday = getStatistic(\n        timeseries?.[highlightedDate],\n        'delta',\n        statistic\n      );\n      if (chartType === 'total') return deltaToday;\n\n      const yesterday = formatISO(subDays(parseIndiaDate(highlightedDate), 1), {\n        representation: 'date',\n      });\n      const deltaYesterday = getStatistic(\n        timeseries?.[yesterday],\n        'delta',\n        statistic\n      );\n      return deltaToday - deltaYesterday;\n    },\n    [timeseries, highlightedDate, chartType]\n  );\n\n  const trail = useMemo(() => {\n    const styles = [];\n\n    [0, 0, 0, 0, 0].map((element, index) => {\n      styles.push({\n        animationDelay: `${index * 250}ms`,\n      });\n      return null;\n    });\n    return styles;\n  }, []);\n\n  return (\n    <React.Fragment>\n      <div className=\"Timeseries\">\n        {PENDENCY_STATISTICS.map((statistic, index) => {\n          const delta = getStatisticDelta(statistic, index);\n          const statisticConfig = STATISTIC_CONFIGS[statistic];\n          return (\n            <div\n              key={statistic}\n              className={classnames('svg-parent fadeInUp', `is-${statistic}`)}\n              ref={wrapperRef}\n              style={trail[index], {marginRight:'2%'}}\n            >\n              {highlightedDate && (\n                <div className={classnames('stats', `is-${statistic}`)}>\n                  <h5 className=\"title\">\n                    {t(capitalize(statisticConfig.ts_displayName))}\n                  </h5>\n                  <h5 className=\"title\">\n                    {highlightedDate}\n                  </h5>\n                  <div className=\"stats-bottom\">\n                    <h2>\n                      {formatNumber(\n                          timeseries[highlightedDate],\n                        \n                        statisticConfig.format !== 'short'\n                          ? statisticConfig.format\n                          : 'int',\n                        statistic\n                      )}\n                    </h2>\n                    {/*<h6>{`${delta > 0 ? '+' : ''}${formatNumber(\n                      delta,\n                      statisticConfig.format !== 'short'\n                        ? statisticConfig.format\n                        : 'int',\n                      statistic\n                    )}`}</h6> */}\n                  </div>\n                </div>\n              )}\n              <svg\n                ref={(element) => {\n                  refs.current[index] = element;\n                }}\n                preserveAspectRatio=\"xMidYMid meet\"\n              >\n                <g className=\"x-axis\" />\n                // <g className=\"x-axis2\" />\n                <g className=\"y-axis\" />\n              </svg>\n            </div>\n          );\n        })}\n      </div>\n    </React.Fragment>\n  );\n}\n\nconst isEqual = (prevProps, currProps) => {\n  if (!equal(currProps.chartType, prevProps.chartType)) {\n    return false;\n  } else if (\n    !equal(\n      currProps.regionHighlighted.stateCode,\n      prevProps.regionHighlighted.stateCode\n    )\n  ) {\n    return false;\n  } else if (\n    !equal(\n      currProps.regionHighlighted.districtName,\n      prevProps.regionHighlighted.districtName\n    )\n  ) {\n    return false;\n  } else if (!equal(currProps.dates, prevProps.dates)) {\n    return false;\n  }\n  return true;\n};\n\nexport default React.memo(Trendbar, isEqual);\n"],"sourceRoot":""}