{"version":3,"sources":["components/MapSwitcher.js"],"names":["React","memo","mapStatistic","setMapStatistic","useMeasure","mapSwitcher","width","useState","clicked","setClicked","count","setCount","useSpring","opacity","background","STATISTIC_CONFIGS","color","transform","PRIMARY_STATISTICS","indexOf","config","gentle","spring","set","useEffect","ReactDOM","unstable_batchedUpdates","delay","onStart","bind","onRest","handleClick","useCallback","statistic","prevCount","className","ref","div","style","map","index","key","classnames","onClick","prevProps","currProps"],"mappings":"qNAoEeA,cAAMC,MA5DD,SAAC,GAAqC,IAApCC,EAAmC,EAAnCA,aAAcC,EAAqB,EAArBA,gBAAqB,EACxBC,cADwB,mBAChDC,EADgD,KAClCC,EADkC,KAClCA,MADkC,EAEzBC,oBAAS,GAFgB,mBAEhDC,EAFgD,KAEvCC,EAFuC,OAG7BF,mBAAS,GAHoB,mBAGhDG,EAHgD,KAGzCC,EAHyC,OAIjCC,aAAU,iBAAO,CACrCC,QAAS,EACTC,WAAW,GAAD,OAAKC,IAAkBb,GAAcc,MAArC,MACVC,UAAU,cAAD,OACqC,IAA3CC,IAAmBC,QAAQjB,GADrB,OAGTkB,OAAQA,IAAOC,WAVsC,mBAIhDC,EAJgD,KAIxCC,EAJwC,KAavDC,qBAAU,WACJlB,EAAQ,GACVmB,IAASC,yBAAwB,WAC/BH,EAAI,CACFN,UAAU,cAAD,OACoC,IAA3CC,IAAmBC,QAAQjB,GADpB,OAGTW,QAAS,EACTC,WAAW,GAAD,OAAKC,IAAkBb,GAAcc,MAArC,MACVW,MAAiB,IAAVjB,EAAc,KAAO,EAC5BkB,QAASnB,EAAWoB,U,GAAW,GAC/BC,OAAQrB,EAAWoB,U,GAAW,UAInC,CAACnB,EAAOR,EAAcqB,EAAKjB,IAE9B,IAAMyB,EAAcC,uBAClB,SAACC,GACCtB,GAAS,SAACuB,GAAD,OAAeA,EAAY,KACpC/B,EAAgB8B,KAElB,CAAC9B,IAGH,OACE,yBAAKgC,UAAU,cAAcC,IAAK/B,GAChC,kBAAC,IAASgC,IAAV,CAAcF,UAAU,YAAYG,MAAOhB,IAE1CJ,IAAmBqB,KAAI,SAACN,EAAWO,GAAZ,OACtB,yBACEC,IAAKD,EACLL,UAAWO,IAAW,YAAD,4BAAsBT,IAAezB,IAC1DmC,QAASZ,EAAYF,U,EAAWI,YAO1B,SAACW,EAAWC,GAC1B,OAAID,EAAU1C,eAAiB2C,EAAU3C","file":"static/js/46.d5b338a2.chunk.js","sourcesContent":["import {PRIMARY_STATISTICS, STATISTIC_CONFIGS} from '../constants';\n\nimport classnames from 'classnames';\nimport React, {useState, useCallback, useEffect} from 'react';\nimport ReactDOM from 'react-dom';\nimport {useSpring, animated, config} from 'react-spring';\nimport {useMeasure} from 'react-use';\n\nconst MapSwitcher = ({mapStatistic, setMapStatistic}) => {\n  const [mapSwitcher, {width}] = useMeasure();\n  const [clicked, setClicked] = useState(false);\n  const [count, setCount] = useState(0);\n  const [spring, set] = useSpring(() => ({\n    opacity: 0,\n    background: `${STATISTIC_CONFIGS[mapStatistic].color}20`,\n    transform: `translateY(${\n       PRIMARY_STATISTICS.indexOf(mapStatistic) * 180\n    }px)`,\n    config: config.gentle,\n  }));\n\n  useEffect(() => {\n    if (width > 0) {\n      ReactDOM.unstable_batchedUpdates(() => {\n        set({\n          transform: `translateY(${\n            PRIMARY_STATISTICS.indexOf(mapStatistic) * 180\n          }px)`,\n          opacity: 1,\n          background: `${STATISTIC_CONFIGS[mapStatistic].color}20`,\n          delay: count === 0 ? 1500 : 0,\n          onStart: setClicked.bind(this, true),\n          onRest: setClicked.bind(this, false),\n        });\n      });\n    }\n  }, [count, mapStatistic, set, width]);\n\n  const handleClick = useCallback(\n    (statistic) => {\n      setCount((prevCount) => prevCount + 1);\n      setMapStatistic(statistic);\n    },\n    [setMapStatistic]\n  );\n\n  return (\n    <div className=\"MapSwitcher\" ref={mapSwitcher}>\n      <animated.div className=\"highlight\" style={spring}></animated.div>\n\n      {PRIMARY_STATISTICS.map((statistic, index) => (\n        <div\n          key={index}\n          className={classnames('clickable', {[`is-${statistic}`]: !clicked})}\n          onClick={handleClick.bind(this, statistic)}\n        ></div>\n      ))}\n    </div>\n  );\n};\n\nconst isEqual = (prevProps, currProps) => {\n  if (prevProps.mapStatistic !== currProps.mapStatistic) {\n    return false;\n  }\n  return true;\n};\n\nexport default React.memo(MapSwitcher, isEqual);\n"],"sourceRoot":""}